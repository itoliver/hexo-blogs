{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/16x16.png","path":"images/16x16.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/180x180.png","path":"images/180x180.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/32x32.png","path":"images/32x32.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/blog-logo.jpg","path":"images/blog-logo.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"062728a4d16c47f706a67ad0b68cd0e8c0601daf","modified":1523158665240},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1522823918593},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1522823918593},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1522823918593},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1522823918596},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1522823918596},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1522823918597},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1522823918597},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1522823918598},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1522823918598},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1522823918599},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1522823918599},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1522823918600},{"_id":"themes/next/_config.yml","hash":"ce1481be2efb7375cd5c087faa0faec1713c3697","modified":1523275056524},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1522823918601},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1522823918601},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1522823918648},{"_id":"source/_posts/Add-User-Script.md","hash":"e9418ee24265116e5f7ee19c3b18b2d97192c240","modified":1523261012547},{"_id":"source/_posts/docker-mariadb集群-主从同步.md","hash":"57825642b83e9fddb04259301ce91a648c5f9dd9","modified":1523253045260},{"_id":"source/_posts/docker-nginx-php部署.md","hash":"c212c3b5145ea4d0ff21ff13effc69d4eeb496b8","modified":1523253055669},{"_id":"source/_posts/docker-swarm集群.md","hash":"b23dffa76bdf71db670cb77c4bedfe500df88b82","modified":1523253076972},{"_id":"source/_posts/docker-redis集群.md","hash":"1a33aeb79f2b38e846d4964ebffe8417b5b51dd9","modified":1523253064949},{"_id":"source/_posts/etcd集群.md","hash":"1ca1c4d807e7a235a8ef03d67c327436ca6caf34","modified":1523260793899},{"_id":"source/_posts/registry-v2搭建.md","hash":"2c33642cd875fb7c21c424118657248a0d632f92","modified":1523253107318},{"_id":"source/_posts/你好，Oliver.md","hash":"969e6d4ed9066e18979f3a997c4d018b1d8c8477","modified":1523268262802},{"_id":"source/categories/index.md","hash":"5d4ae0ed9448c30dd248d07244596a5977a70cdf","modified":1523268520878},{"_id":"source/about/index.md","hash":"99c40560b656902b38ddc163d6e9ed4e8984c1c8","modified":1523268475681},{"_id":"source/sitemap/index.md","hash":"fac1f00fe2da09a22445135e58a0fb9b5b09d5b2","modified":1523268542101},{"_id":"source/tags/index.md","hash":"7574756b1eac82c6ec09840935bba6834f728aca","modified":1523268519433},{"_id":"source/schedule/index.md","hash":"2facfc115da229a3aed315baf5156771c939bb3f","modified":1523268536242},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1522823918594},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1522823918594},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1522823918595},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1522823918595},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1522823918602},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1522823918603},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1522823918603},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1522823918604},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1522823918604},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1522823918605},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1522823918605},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1522823918606},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1522823918606},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1522823918607},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1522823918607},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1522823918608},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1522823918608},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0dcfc2652948a902bb42596b8fc01459bd13a837","modified":1522825434490},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1522823918609},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1522823918609},{"_id":"themes/next/layout/_layout.swig","hash":"c03ccb7009b305212ea56550a7a3297fc6da5a03","modified":1523266409434},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1522823918645},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1522823918645},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1522823918646},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1522823918646},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1522823918647},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1522823918648},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1522823918647},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1522823918649},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1522823918650},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1523162788631},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1522823918809},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1522823918809},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1522823918809},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918713},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1522823918610},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1522823918611},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"deb0ed2a1fa94be553debdaf017a3cd36f7fc466","modified":1523270541533},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1522823918612},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1522823918612},{"_id":"themes/next/layout/_macro/post-end-tag.swig","hash":"38cf3b8e1803671b1c4745e65be5fa2fec7a02e6","modified":1523194361399},{"_id":"themes/next/layout/_macro/post.swig","hash":"956f8b3517776ae7c96acdddb64eaca395aeb256","modified":1523241141429},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1522823918613},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1522823918614},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1522823918614},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1522823918615},{"_id":"themes/next/layout/_partials/footer.swig","hash":"52abf81453e553f92e537659bfb2a77f30bfc4fc","modified":1523184202526},{"_id":"themes/next/layout/_partials/head.swig","hash":"601160c122e568fcc9981fe2ced4cf3f7388aa44","modified":1523264554157},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1522823918618},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1522823918618},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1522823918619},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1522823918619},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1522823918623},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1522823918624},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1522823918627},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1522823918638},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1522823918638},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1522823918639},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1522823918639},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1522823918640},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1522823918640},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1522823918641},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1522823918651},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1522823918651},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1522823918652},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1522823918652},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1522823918653},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1522823918653},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1522823918654},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1522823918654},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1522823918655},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1522823918712},{"_id":"themes/next/source/images/16x16.png","hash":"62bc3b1bbc9e34d1690cfe050f0fcdc0478b298f","modified":1523188148007},{"_id":"themes/next/source/images/180x180.png","hash":"373851f54d18118752ace9a21e91135114fc1380","modified":1523188007110},{"_id":"themes/next/source/images/32x32.png","hash":"d41507ffed09f877bfea700c708621ac882103c9","modified":1523188110244},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1522823918714},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522823918714},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522823918715},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1522823918715},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1522823918716},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1522823918717},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1522823918717},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1522823918718},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1522823918718},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1522823918719},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522823918719},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522823918720},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522823918720},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1522823918721},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522823918721},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1522823918721},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1522823918722},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522823918722},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918626},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918625},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918695},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918695},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918696},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918710},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522823918712},{"_id":"themes/next/source/images/blog-logo.jpg","hash":"8dcee3e8dac3336256f96d59ec6c98cbc64d9f48","modified":1522748379028},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1522823918617},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1522823918617},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1522823918620},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1522823918620},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1522823918621},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1522823918621},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1522823918622},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1522823918622},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1522823918623},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1522823918624},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1522823918625},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1522823918626},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1522823918627},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1522823918628},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1522823918628},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1522823918629},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1522823918629},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1522823918630},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1522823918630},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1522823918631},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1522823918631},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1522823918632},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1522823918632},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1522823918632},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1522823918633},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1522823918634},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1522823918634},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1522823918634},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1522823918635},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1522823918635},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1522823918636},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1522823918636},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1522823918637},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1522823918637},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1522823918642},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1522823918643},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1522823918643},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1522823918644},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1523271651407},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1522823918695},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1522823918696},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1522823918696},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1522823918710},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1522823918710},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1522823918711},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1522823918712},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1522823918723},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1522823918724},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1522823918724},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1522823918725},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1522823918725},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1522823918726},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1522826977728},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1522823918726},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1522823918727},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1522823918728},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1522823918729},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1522823918729},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1522823918738},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1522823918742},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1522823918743},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1522823918744},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1522823918744},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1522823918754},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1522823918754},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1522823918755},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1522823918755},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1522823918758},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1522823918758},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1522823918759},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1522823918759},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1522823918760},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1522823918778},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1522823918781},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1522823918781},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1522823918782},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1522823918782},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1522823918783},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1522823918783},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1522823918785},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1522823918785},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1522823918786},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522823918787},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522823918787},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522823918788},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522823918788},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522823918789},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522823918790},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522823918789},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522823918790},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522823918791},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522823918791},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522823918791},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522823918792},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522823918792},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1522823918793},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1522823918794},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1522823918795},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1522823918795},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1522823918803},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1522823918803},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1522823918807},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1522823918807},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1522823918808},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1522823918780},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1522823918642},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1522823918642},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1522823918656},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1522823918657},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1522823918657},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1522823918657},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1522823918658},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1522823918666},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1522823918680},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1522823918690},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1522823918691},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1522823918691},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1522823918692},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1522823918692},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1522823918693},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1522823918693},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1522823918698},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1522823918698},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1522823918699},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1522823918699},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1522823918700},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1522823918700},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1522823918700},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1522823918702},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1522823918704},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1522823918704},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1522823918705},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1522823918705},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1522823918705},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1522823918707},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1522823918707},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1522823918708},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1522823918708},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1522823918709},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1522823918709},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1522823918728},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1522823918734},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1522823918736},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1522823918737},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1522823918745},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1522823918745},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1522823918746},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1522823918746},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1522823918747},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1522823918748},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1522823918752},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1522823918753},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1522823918753},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1522823918756},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1522823918757},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1522823918761},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1522823918761},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1522823918762},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1522823918801},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1522823918802},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1522823918735},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522823918776},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522823918778},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1522823918806},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1522823918659},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1522823918659},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1522823918660},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1522823918660},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1522823918661},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1522823918661},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1522823918662},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1522823918662},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1522823918663},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1522823918664},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1522823918664},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1522823918665},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1522823918665},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1522823918666},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1522823918675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1522823918675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1522823918676},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1522823918676},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1522823918677},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1522823918678},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1522823918678},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1522823918679},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1522823918679},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1522823918680},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1523239197024},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1522823918667},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1522823918667},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1522823918668},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1522823918668},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1522823918669},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1522823918670},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1522823918671},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1522823918671},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1522823918672},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1522823918672},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1522823918672},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1522823918673},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1522823918674},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1522823918673},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"994162ad5e62874a084310c489ce5d21b48607b2","modified":1523239390705},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1522823918681},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1522823918681},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1522823918682},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1522823918682},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1522823918683},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1522823918683},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1522823918684},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1522823918684},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1522823918685},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1522823918685},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1522823918686},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1522823918686},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1522823918687},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1522823918687},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1522823918688},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1522823918688},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1522823918689},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1522823918689},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1522823918689},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1522823918702},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1522823918703},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1522823918706},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1522823918731},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1522823918731},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1522823918732},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1522823918733},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1522823918733},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1522823918748},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1522823918749},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1522823918749},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1522823918750},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1522823918750},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1522823918751},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1522823918765},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522823918767},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1522823918775},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1522823918741},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1522823918800},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1522823918772},{"_id":"public/search.xml","hash":"8821dd6347300fb8e1f8cc774eb3030d65c252e3","modified":1523257178429},{"_id":"public/sitemap.xml","hash":"5372869a475d716d2ef3edba02ce1ad90d84ea97","modified":1523270661258},{"_id":"public/atom.xml","hash":"ffb055259d0a2105c9a38a6a5708ce5db02f3618","modified":1523270661271},{"_id":"public/categories/index.html","hash":"28c6b3bae735a429fd63df95a372ce474f525f13","modified":1523275064894},{"_id":"public/about/index.html","hash":"1eae00da0cf8e7f2843cb935961399d64abaafd8","modified":1523275064894},{"_id":"public/sitemap/index.html","hash":"720044f40d513fc7b5e3bdbe7b75b466b75b8b47","modified":1523275064895},{"_id":"public/tags/index.html","hash":"4e86dba17827caf91b57d7f93d59628253076607","modified":1523275064895},{"_id":"public/schedule/index.html","hash":"2b86c9ffdef738c734ee779faae3d5be0d2631e2","modified":1523275064895},{"_id":"public/2018/04/09/docker-nginx-php部署/index.html","hash":"373320a24a9f9ab6c08b82b628944431897a8f9d","modified":1523275064895},{"_id":"public/2018/04/09/docker-mariadb集群-主从同步/index.html","hash":"61d4cbd47f3db56044ca4da9ce419e3706fca75d","modified":1523275064895},{"_id":"public/2018/04/08/docker-swarm集群/index.html","hash":"3e244f8937241125d47cd4a3f54015f65b4c0b47","modified":1523275064895},{"_id":"public/2018/04/08/docker-redis集群/index.html","hash":"4847926d61c8a0ba72e9756d95844dccb16dc49b","modified":1523275064895},{"_id":"public/2018/04/08/registry-v2搭建/index.html","hash":"f800498fef2c99e87c1b68e0799784e8598aab29","modified":1523275064896},{"_id":"public/2018/04/08/etcd集群/index.html","hash":"66ef5c52f1a8653805d853fc744c66e6e44880f7","modified":1523275064896},{"_id":"public/2018/04/04/Add-User-Script/index.html","hash":"67ca0d14da3380fb2c187a4e2683f209dd1c1347","modified":1523275064896},{"_id":"public/2018/04/04/你好，Oliver/index.html","hash":"e491bd7a0715c314dfbbf868f3c89c1bf83d2f2d","modified":1523275064896},{"_id":"public/categories/dockers/index.html","hash":"ab57932417a689a6d80c54b104aae5ca751de096","modified":1523275064896},{"_id":"public/archives/index.html","hash":"ed1131505632bbfc94b4ff08f3b4c4ec8f9faf7d","modified":1523275064896},{"_id":"public/index.html","hash":"82e42e17a8ff70d1584ed3e08fcccb0e09567b5d","modified":1523275064896},{"_id":"public/tags/linux/index.html","hash":"6dba40aa87eaae063244b0e90e9b3b71da753a56","modified":1523275064896},{"_id":"public/tags/shell/index.html","hash":"6a34d9401216216e75c7ebd1b1cc7564f8ac0481","modified":1523275064897},{"_id":"public/tags/linux自动化运维/index.html","hash":"a24a1145c7b0ef86019eddbfd5cbdc74319ea0b2","modified":1523275064897},{"_id":"public/tags/docker/index.html","hash":"b2a3143ce24ce28bb4748927bf7cc842393f629c","modified":1523275064897},{"_id":"public/tags/mariadb/index.html","hash":"2a99dfb9e6a24973a7fc35086a39aa9d01cc14d8","modified":1523275064897},{"_id":"public/tags/nginx/index.html","hash":"697830e3add3ad47dffcea97629b6f141346bf72","modified":1523275064897},{"_id":"public/tags/php/index.html","hash":"488b917ff97684cb594501858af0194494589e4d","modified":1523275064897},{"_id":"public/tags/swarm/index.html","hash":"3f26e757b4c58e755aee81088bbf861267f7783e","modified":1523275064897},{"_id":"public/tags/redis/index.html","hash":"e11de447cfa68df41343972ae3554bfb9d8eeab7","modified":1523275064897},{"_id":"public/tags/etcd/index.html","hash":"3ec9c5fa708a97f66572dc9ad3fd06007491d247","modified":1523275064898},{"_id":"public/tags/docker-registry/index.html","hash":"5587c94a450e2008321dffc2f684bad3cfa4c2ab","modified":1523275064898},{"_id":"public/CNAME","hash":"062728a4d16c47f706a67ad0b68cd0e8c0601daf","modified":1523257178529},{"_id":"public/images/16x16.png","hash":"62bc3b1bbc9e34d1690cfe050f0fcdc0478b298f","modified":1523257178529},{"_id":"public/images/180x180.png","hash":"373851f54d18118752ace9a21e91135114fc1380","modified":1523257178529},{"_id":"public/images/32x32.png","hash":"d41507ffed09f877bfea700c708621ac882103c9","modified":1523257178529},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1523257178529},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523257178529},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523257178530},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1523257178530},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1523257178530},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1523257178530},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1523257178530},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1523257178530},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1523257178530},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1523257178530},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523257178531},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523257178531},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523257178531},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1523257178531},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523257178531},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1523257178531},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1523257178531},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523257178531},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1523257178531},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1523257178532},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523257178532},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523257178532},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523257178532},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523257178532},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523257178532},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523257178532},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1523257178532},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523257178533},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523257178533},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523257178533},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523257178533},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523257178533},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523257178533},{"_id":"public/images/blog-logo.jpg","hash":"8dcee3e8dac3336256f96d59ec6c98cbc64d9f48","modified":1523257179444},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523257179448},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523257179465},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1523257179480},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1523257179481},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1523257179481},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1523257179481},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1523257179481},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523257179481},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523257179481},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1523257179481},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1523257179482},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1523257179482},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1523257179482},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1523257179482},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523257179482},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523257179482},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1523257179482},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1523257179482},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1523257179483},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1523257179483},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1523257179483},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1523257179483},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1523257179483},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1523257179483},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523257179483},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523257179483},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1523257179483},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523257179484},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523257179484},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523257179484},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523257179484},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523257179484},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523257179484},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523257179484},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523257179485},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523257179485},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523257179485},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523257179485},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523257179485},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523257179485},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523257179485},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1523257179486},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523257179486},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1523257179486},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523257179486},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523257179486},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523257179486},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523257179486},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523257179486},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523257179487},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523257179487},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523257179487},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523257179487},{"_id":"public/css/main.css","hash":"e8fbb233e91e33bb8f0a9c622b8d2f1bd5d01ecb","modified":1523257179487},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1523257179487},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1523257179487},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523257179487},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523257179488},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523257179488},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523257179488},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523257179488},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523257179488},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1523257179488},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1523257179488},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523257179489},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523257179489},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523257179489},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523257179489},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523257179489},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523257179489},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523257179489},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523257179490},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523257179490},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523257179490},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523257179490},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523257179491},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523257179491},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1523257179509}],"Category":[{"name":"dockers","_id":"cjfrvzqkv0007cojftkllu9ky"}],"Data":[],"Page":[{"title":"categories","date":"2018-04-08T03:05:37.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-08 11:05:37\ntype: categories\ncomments: false\n---\n","updated":"2018-04-09T10:08:40.878Z","path":"categories/index.html","_id":"cjfrvzqkd0001cojf0tr35sfu","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-04-04T07:36:42.000Z","comments":0,"_content":"##关于我\n一个在运维路上的超级小飞猪\n\n欢迎在博文下面留言评论~~~~\n\ngithub: https://www.github.com/itoliver\ncnblogs: http://www.cnblogs.com/oliver-blogs\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-04-04 15:36:42\ncomments: false\n---\n##关于我\n一个在运维路上的超级小飞猪\n\n欢迎在博文下面留言评论~~~~\n\ngithub: https://www.github.com/itoliver\ncnblogs: http://www.cnblogs.com/oliver-blogs\n","updated":"2018-04-09T10:07:55.681Z","path":"about/index.html","_id":"cjfrvzqkk0003cojfdp59ivi3","layout":"page","content":"<p>##关于我<br>一个在运维路上的超级小飞猪</p>\n<p>欢迎在博文下面留言评论~~~~</p>\n<p>github: <a href=\"https://www.github.com/itoliver\" target=\"_blank\" rel=\"noopener\">https://www.github.com/itoliver</a><br>cnblogs: <a href=\"http://www.cnblogs.com/oliver-blogs\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/oliver-blogs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##关于我<br>一个在运维路上的超级小飞猪</p>\n<p>欢迎在博文下面留言评论~~~~</p>\n<p>github: <a href=\"https://www.github.com/itoliver\" target=\"_blank\" rel=\"noopener\">https://www.github.com/itoliver</a><br>cnblogs: <a href=\"http://www.cnblogs.com/oliver-blogs\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/oliver-blogs</a></p>\n"},{"title":"sitemap","date":"2018-04-08T03:07:35.000Z","type":"sitemap","comments":0,"_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2018-04-08 11:07:35\ntype: sitemap\ncomments: false\n---\n","updated":"2018-04-09T10:09:02.101Z","path":"sitemap/index.html","_id":"cjfrvzqkt0006cojf44sjgigj","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-04-04T07:35:48.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-04 15:35:48\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-04-09T10:08:39.433Z","path":"tags/index.html","_id":"cjfrvzqky0009cojfa53myq2i","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2018-04-08T04:53:12.000Z","type":"schedule","comments":0,"_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-04-08 12:53:12\ntype: schedule\ncomments: false\n---\n","updated":"2018-04-09T10:08:56.242Z","path":"schedule/index.html","_id":"cjfrvzql3000ccojfaimnkl86","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Add User Script","date":"2018-04-04T10:39:32.000Z","_content":"前言\n可用于服务器自动添加用户，并发送邮件\n实现shell自动化建设\n<!--more-->\n```+shell\n#!/bin/bash\npassword=\"password\"\nip=`ifconfig eth1 |grep inet |awk '{printf \"IP:\"}''{print $2}'`\necho \"请输入要创建的用户名：\"\nread username\necho \"您输入的用户名为: $username\"\negrep \"^servergroups\" /etc/group >& /dev/null\nif [ $? -ne 0 ]\nthen\n    groupadd servergroups\nelse\n    echo \"已存在servergroups组\"\nfi\n\negrep \"^$username\" /etc/passwd >& /dev/null\nif [ $? -ne 0 ]\nthen\n    useradd $username && \\\n    usermod -aG servergroups $username && \\\n    echo $username | passwd --stdin $username\n    chage -d 0 $username\n    echo \"创建 $username 用户成功\"\n    #echo \"密码为:$password\"\n    id $username\n    text=\"用户名：$username\\n密码为：$username\\n$ip\\n注意：第一次登陆必须要修改密码!!!!\"\n    echo -e \"$text\" | mail -s \"$username,服务器用户创建成功，请及时修改密码!!\" $username@qq.com\nelse\n    echo \"$username 已存在\"\n    id $username\nfi\n```","source":"_posts/Add-User-Script.md","raw":"---\ntitle: Add User Script\ndate: 2018-04-04 18:39:32\ntags: [linux, shell, linux自动化运维]\n---\n前言\n可用于服务器自动添加用户，并发送邮件\n实现shell自动化建设\n<!--more-->\n```+shell\n#!/bin/bash\npassword=\"password\"\nip=`ifconfig eth1 |grep inet |awk '{printf \"IP:\"}''{print $2}'`\necho \"请输入要创建的用户名：\"\nread username\necho \"您输入的用户名为: $username\"\negrep \"^servergroups\" /etc/group >& /dev/null\nif [ $? -ne 0 ]\nthen\n    groupadd servergroups\nelse\n    echo \"已存在servergroups组\"\nfi\n\negrep \"^$username\" /etc/passwd >& /dev/null\nif [ $? -ne 0 ]\nthen\n    useradd $username && \\\n    usermod -aG servergroups $username && \\\n    echo $username | passwd --stdin $username\n    chage -d 0 $username\n    echo \"创建 $username 用户成功\"\n    #echo \"密码为:$password\"\n    id $username\n    text=\"用户名：$username\\n密码为：$username\\n$ip\\n注意：第一次登陆必须要修改密码!!!!\"\n    echo -e \"$text\" | mail -s \"$username,服务器用户创建成功，请及时修改密码!!\" $username@qq.com\nelse\n    echo \"$username 已存在\"\n    id $username\nfi\n```","slug":"Add-User-Script","published":1,"updated":"2018-04-09T08:03:32.547Z","_id":"cjfrvzqk60000cojft4aw4esj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前言<br>可用于服务器自动添加用户，并发送邮件<br>实现shell自动化建设<br><a id=\"more\"></a></p>\n<pre><code class=\"+shell\">#!/bin/bash\npassword=&quot;password&quot;\nip=`ifconfig eth1 |grep inet |awk &#39;{printf &quot;IP:&quot;}&#39;&#39;{print $2}&#39;`\necho &quot;请输入要创建的用户名：&quot;\nread username\necho &quot;您输入的用户名为: $username&quot;\negrep &quot;^servergroups&quot; /etc/group &gt;&amp; /dev/null\nif [ $? -ne 0 ]\nthen\n    groupadd servergroups\nelse\n    echo &quot;已存在servergroups组&quot;\nfi\n\negrep &quot;^$username&quot; /etc/passwd &gt;&amp; /dev/null\nif [ $? -ne 0 ]\nthen\n    useradd $username &amp;&amp; \\\n    usermod -aG servergroups $username &amp;&amp; \\\n    echo $username | passwd --stdin $username\n    chage -d 0 $username\n    echo &quot;创建 $username 用户成功&quot;\n    #echo &quot;密码为:$password&quot;\n    id $username\n    text=&quot;用户名：$username\\n密码为：$username\\n$ip\\n注意：第一次登陆必须要修改密码!!!!&quot;\n    echo -e &quot;$text&quot; | mail -s &quot;$username,服务器用户创建成功，请及时修改密码!!&quot; $username@qq.com\nelse\n    echo &quot;$username 已存在&quot;\n    id $username\nfi\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>前言<br>可用于服务器自动添加用户，并发送邮件<br>实现shell自动化建设<br>","more":"</p>\n<pre><code class=\"+shell\">#!/bin/bash\npassword=&quot;password&quot;\nip=`ifconfig eth1 |grep inet |awk &#39;{printf &quot;IP:&quot;}&#39;&#39;{print $2}&#39;`\necho &quot;请输入要创建的用户名：&quot;\nread username\necho &quot;您输入的用户名为: $username&quot;\negrep &quot;^servergroups&quot; /etc/group &gt;&amp; /dev/null\nif [ $? -ne 0 ]\nthen\n    groupadd servergroups\nelse\n    echo &quot;已存在servergroups组&quot;\nfi\n\negrep &quot;^$username&quot; /etc/passwd &gt;&amp; /dev/null\nif [ $? -ne 0 ]\nthen\n    useradd $username &amp;&amp; \\\n    usermod -aG servergroups $username &amp;&amp; \\\n    echo $username | passwd --stdin $username\n    chage -d 0 $username\n    echo &quot;创建 $username 用户成功&quot;\n    #echo &quot;密码为:$password&quot;\n    id $username\n    text=&quot;用户名：$username\\n密码为：$username\\n$ip\\n注意：第一次登陆必须要修改密码!!!!&quot;\n    echo -e &quot;$text&quot; | mail -s &quot;$username,服务器用户创建成功，请及时修改密码!!&quot; $username@qq.com\nelse\n    echo &quot;$username 已存在&quot;\n    id $username\nfi\n</code></pre>"},{"title":"docker-mariadb集群-主从同步","date":"2018-04-09T04:27:34.000Z","description":null,"copyright":true,"_content":"前言\nMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。\n<!--more-->\n# 修改mariadb docker系统时间\n```\ntzselect\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n## master部署\n# 1.创建mariadb数据配置文件\n```\nmkdir -p /opt/docker-mariadb/{data,conf.d,script}\n```\n# 2.拉取mairadb10.1.10镜像\n```\ndocker pull mariadb:10.1.10\n```\n# 3.创建mariadb配置文件\n```\ntee /opt/docker-mariadb/conf.d/my.cnf <<EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 1\nlog_bin=master-bin\nrelay-log=relay-bin\nexpire_logs_days = 30\nbinlog_format=row\nsync_binlog = 1\n#sync_master_info = 1\ndefault-storage-engine=INNODB\ninnodb_file_per_table = ON\n#innodb_flush_logs_at_trx_commit\n#innodb_support_xa = on\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = 'TABLE'\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\n\nEOF\n```\n# 4.创建运行脚本\n```\ntee /opt/docker-mariadb/script/mariadb.sh<<EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-master \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\n```\n查看docker容器运行状态\n```\ndocker ps -a\n```\n# 5.进入mariadb容器\n```\ndocker exec -it mariadb-master bash\n```\n# 6.配置mysql master用户授权\n```\nmysql -uroot -p\ngrant replication slave,replication client on *.* to 'repluser'@'shangserver004' identified by 'replpassword';\nflush privileges;\nshow master status;\n```\n## slave部署\n# 1.创建mariadb数据配置文件\n```\nmkdir -p /opt/docker-mariadb/{data,conf.d,script}\n```\n# 2.拉取mairadb10.1.10镜像\n```\ndocker pull mariadb:10.1.10\n```\n# 3.创建mariadb配置文件\n```\ntee /opt/docker-mariadb/conf.d/my.cnf <<EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 2\n#log_bin=slave-bin\n#binlog_format=row\nrelay-log=relay-bin\nexpire_logs_days = 30\nread-only = on\nsync_binlog = 1\ndefault-storage-engine=INNODB\n#sync_relay_log = 1\n#sync_relay_log_info = 1\ninnodb_file_per_table = ON\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = 'TABLE'\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\nEOF\n```\n# 4.创建运行脚本\n```\ntee /opt/docker-mariadb/script/mariadb.sh<<EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-slave \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\nEOF\n```\n查看docker容器运行状态\n```\ndocker ps -a\n```\n# 5.进入mariadb容器\n```\ndocker exec -it mariadb-slave bash\n```\n# 6.配置mysql slave\n```\nmysql -uroot -p\n```\n```\nchange master to\nmaster_host='192.168.1.14',\nmaster_port=3307,\nmaster_user='repluser',\nmaster_password='replpassword',\nmaster_log_file='master-bin.000001',\nmaster_log_pos=674,\nmaster_connect_retry=5,\nmaster_heartbeat_period=2;\n```\n```\nstar slave;\n```\n```\nshow status slave;\n```","source":"_posts/docker-mariadb集群-主从同步.md","raw":"---\ntitle: docker-mariadb集群-主从同步\ndate: 2018-04-09 12:27:34\ndescription:\ncategories: dockers\ntags: [docker, mariadb, linux自动化运维]\ncopyright: true\n---\n前言\nMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。\n<!--more-->\n# 修改mariadb docker系统时间\n```\ntzselect\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n## master部署\n# 1.创建mariadb数据配置文件\n```\nmkdir -p /opt/docker-mariadb/{data,conf.d,script}\n```\n# 2.拉取mairadb10.1.10镜像\n```\ndocker pull mariadb:10.1.10\n```\n# 3.创建mariadb配置文件\n```\ntee /opt/docker-mariadb/conf.d/my.cnf <<EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 1\nlog_bin=master-bin\nrelay-log=relay-bin\nexpire_logs_days = 30\nbinlog_format=row\nsync_binlog = 1\n#sync_master_info = 1\ndefault-storage-engine=INNODB\ninnodb_file_per_table = ON\n#innodb_flush_logs_at_trx_commit\n#innodb_support_xa = on\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = 'TABLE'\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\n\nEOF\n```\n# 4.创建运行脚本\n```\ntee /opt/docker-mariadb/script/mariadb.sh<<EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-master \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\n```\n查看docker容器运行状态\n```\ndocker ps -a\n```\n# 5.进入mariadb容器\n```\ndocker exec -it mariadb-master bash\n```\n# 6.配置mysql master用户授权\n```\nmysql -uroot -p\ngrant replication slave,replication client on *.* to 'repluser'@'shangserver004' identified by 'replpassword';\nflush privileges;\nshow master status;\n```\n## slave部署\n# 1.创建mariadb数据配置文件\n```\nmkdir -p /opt/docker-mariadb/{data,conf.d,script}\n```\n# 2.拉取mairadb10.1.10镜像\n```\ndocker pull mariadb:10.1.10\n```\n# 3.创建mariadb配置文件\n```\ntee /opt/docker-mariadb/conf.d/my.cnf <<EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 2\n#log_bin=slave-bin\n#binlog_format=row\nrelay-log=relay-bin\nexpire_logs_days = 30\nread-only = on\nsync_binlog = 1\ndefault-storage-engine=INNODB\n#sync_relay_log = 1\n#sync_relay_log_info = 1\ninnodb_file_per_table = ON\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = 'TABLE'\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\nEOF\n```\n# 4.创建运行脚本\n```\ntee /opt/docker-mariadb/script/mariadb.sh<<EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-slave \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\nEOF\n```\n查看docker容器运行状态\n```\ndocker ps -a\n```\n# 5.进入mariadb容器\n```\ndocker exec -it mariadb-slave bash\n```\n# 6.配置mysql slave\n```\nmysql -uroot -p\n```\n```\nchange master to\nmaster_host='192.168.1.14',\nmaster_port=3307,\nmaster_user='repluser',\nmaster_password='replpassword',\nmaster_log_file='master-bin.000001',\nmaster_log_pos=674,\nmaster_connect_retry=5,\nmaster_heartbeat_period=2;\n```\n```\nstar slave;\n```\n```\nshow status slave;\n```","slug":"docker-mariadb集群-主从同步","published":1,"updated":"2018-04-09T05:50:45.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfrvzqkh0002cojfvt0pm95k","content":"<p>前言<br>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。<br><a id=\"more\"></a></p>\n<h1 id=\"修改mariadb-docker系统时间\"><a href=\"#修改mariadb-docker系统时间\" class=\"headerlink\" title=\"修改mariadb docker系统时间\"></a>修改mariadb docker系统时间</h1><pre><code>tzselect\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n</code></pre><h2 id=\"master部署\"><a href=\"#master部署\" class=\"headerlink\" title=\"master部署\"></a>master部署</h2><h1 id=\"1-创建mariadb数据配置文件\"><a href=\"#1-创建mariadb数据配置文件\" class=\"headerlink\" title=\"1.创建mariadb数据配置文件\"></a>1.创建mariadb数据配置文件</h1><pre><code>mkdir -p /opt/docker-mariadb/{data,conf.d,script}\n</code></pre><h1 id=\"2-拉取mairadb10-1-10镜像\"><a href=\"#2-拉取mairadb10-1-10镜像\" class=\"headerlink\" title=\"2.拉取mairadb10.1.10镜像\"></a>2.拉取mairadb10.1.10镜像</h1><pre><code>docker pull mariadb:10.1.10\n</code></pre><h1 id=\"3-创建mariadb配置文件\"><a href=\"#3-创建mariadb配置文件\" class=\"headerlink\" title=\"3.创建mariadb配置文件\"></a>3.创建mariadb配置文件</h1><pre><code>tee /opt/docker-mariadb/conf.d/my.cnf &lt;&lt;EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 1\nlog_bin=master-bin\nrelay-log=relay-bin\nexpire_logs_days = 30\nbinlog_format=row\nsync_binlog = 1\n#sync_master_info = 1\ndefault-storage-engine=INNODB\ninnodb_file_per_table = ON\n#innodb_flush_logs_at_trx_commit\n#innodb_support_xa = on\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = &#39;TABLE&#39;\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\n\nEOF\n</code></pre><h1 id=\"4-创建运行脚本\"><a href=\"#4-创建运行脚本\" class=\"headerlink\" title=\"4.创建运行脚本\"></a>4.创建运行脚本</h1><pre><code>tee /opt/docker-mariadb/script/mariadb.sh&lt;&lt;EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-master \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\n</code></pre><p>查看docker容器运行状态</p>\n<pre><code>docker ps -a\n</code></pre><h1 id=\"5-进入mariadb容器\"><a href=\"#5-进入mariadb容器\" class=\"headerlink\" title=\"5.进入mariadb容器\"></a>5.进入mariadb容器</h1><pre><code>docker exec -it mariadb-master bash\n</code></pre><h1 id=\"6-配置mysql-master用户授权\"><a href=\"#6-配置mysql-master用户授权\" class=\"headerlink\" title=\"6.配置mysql master用户授权\"></a>6.配置mysql master用户授权</h1><pre><code>mysql -uroot -p\ngrant replication slave,replication client on *.* to &#39;repluser&#39;@&#39;shangserver004&#39; identified by &#39;replpassword&#39;;\nflush privileges;\nshow master status;\n</code></pre><h2 id=\"slave部署\"><a href=\"#slave部署\" class=\"headerlink\" title=\"slave部署\"></a>slave部署</h2><h1 id=\"1-创建mariadb数据配置文件-1\"><a href=\"#1-创建mariadb数据配置文件-1\" class=\"headerlink\" title=\"1.创建mariadb数据配置文件\"></a>1.创建mariadb数据配置文件</h1><pre><code>mkdir -p /opt/docker-mariadb/{data,conf.d,script}\n</code></pre><h1 id=\"2-拉取mairadb10-1-10镜像-1\"><a href=\"#2-拉取mairadb10-1-10镜像-1\" class=\"headerlink\" title=\"2.拉取mairadb10.1.10镜像\"></a>2.拉取mairadb10.1.10镜像</h1><pre><code>docker pull mariadb:10.1.10\n</code></pre><h1 id=\"3-创建mariadb配置文件-1\"><a href=\"#3-创建mariadb配置文件-1\" class=\"headerlink\" title=\"3.创建mariadb配置文件\"></a>3.创建mariadb配置文件</h1><pre><code>tee /opt/docker-mariadb/conf.d/my.cnf &lt;&lt;EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 2\n#log_bin=slave-bin\n#binlog_format=row\nrelay-log=relay-bin\nexpire_logs_days = 30\nread-only = on\nsync_binlog = 1\ndefault-storage-engine=INNODB\n#sync_relay_log = 1\n#sync_relay_log_info = 1\ninnodb_file_per_table = ON\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = &#39;TABLE&#39;\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\nEOF\n</code></pre><h1 id=\"4-创建运行脚本-1\"><a href=\"#4-创建运行脚本-1\" class=\"headerlink\" title=\"4.创建运行脚本\"></a>4.创建运行脚本</h1><pre><code>tee /opt/docker-mariadb/script/mariadb.sh&lt;&lt;EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-slave \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\nEOF\n</code></pre><p>查看docker容器运行状态</p>\n<pre><code>docker ps -a\n</code></pre><h1 id=\"5-进入mariadb容器-1\"><a href=\"#5-进入mariadb容器-1\" class=\"headerlink\" title=\"5.进入mariadb容器\"></a>5.进入mariadb容器</h1><pre><code>docker exec -it mariadb-slave bash\n</code></pre><h1 id=\"6-配置mysql-slave\"><a href=\"#6-配置mysql-slave\" class=\"headerlink\" title=\"6.配置mysql slave\"></a>6.配置mysql slave</h1><pre><code>mysql -uroot -p\n</code></pre><pre><code>change master to\nmaster_host=&#39;192.168.1.14&#39;,\nmaster_port=3307,\nmaster_user=&#39;repluser&#39;,\nmaster_password=&#39;replpassword&#39;,\nmaster_log_file=&#39;master-bin.000001&#39;,\nmaster_log_pos=674,\nmaster_connect_retry=5,\nmaster_heartbeat_period=2;\n</code></pre><pre><code>star slave;\n</code></pre><pre><code>show status slave;\n</code></pre>","site":{"data":{}},"excerpt":"<p>前言<br>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可 MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，使用XtraDB（英语：XtraDB）来代替MySQL的InnoDB。<br>","more":"</p>\n<h1 id=\"修改mariadb-docker系统时间\"><a href=\"#修改mariadb-docker系统时间\" class=\"headerlink\" title=\"修改mariadb docker系统时间\"></a>修改mariadb docker系统时间</h1><pre><code>tzselect\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n</code></pre><h2 id=\"master部署\"><a href=\"#master部署\" class=\"headerlink\" title=\"master部署\"></a>master部署</h2><h1 id=\"1-创建mariadb数据配置文件\"><a href=\"#1-创建mariadb数据配置文件\" class=\"headerlink\" title=\"1.创建mariadb数据配置文件\"></a>1.创建mariadb数据配置文件</h1><pre><code>mkdir -p /opt/docker-mariadb/{data,conf.d,script}\n</code></pre><h1 id=\"2-拉取mairadb10-1-10镜像\"><a href=\"#2-拉取mairadb10-1-10镜像\" class=\"headerlink\" title=\"2.拉取mairadb10.1.10镜像\"></a>2.拉取mairadb10.1.10镜像</h1><pre><code>docker pull mariadb:10.1.10\n</code></pre><h1 id=\"3-创建mariadb配置文件\"><a href=\"#3-创建mariadb配置文件\" class=\"headerlink\" title=\"3.创建mariadb配置文件\"></a>3.创建mariadb配置文件</h1><pre><code>tee /opt/docker-mariadb/conf.d/my.cnf &lt;&lt;EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 1\nlog_bin=master-bin\nrelay-log=relay-bin\nexpire_logs_days = 30\nbinlog_format=row\nsync_binlog = 1\n#sync_master_info = 1\ndefault-storage-engine=INNODB\ninnodb_file_per_table = ON\n#innodb_flush_logs_at_trx_commit\n#innodb_support_xa = on\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = &#39;TABLE&#39;\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\n\nEOF\n</code></pre><h1 id=\"4-创建运行脚本\"><a href=\"#4-创建运行脚本\" class=\"headerlink\" title=\"4.创建运行脚本\"></a>4.创建运行脚本</h1><pre><code>tee /opt/docker-mariadb/script/mariadb.sh&lt;&lt;EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-master \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\n</code></pre><p>查看docker容器运行状态</p>\n<pre><code>docker ps -a\n</code></pre><h1 id=\"5-进入mariadb容器\"><a href=\"#5-进入mariadb容器\" class=\"headerlink\" title=\"5.进入mariadb容器\"></a>5.进入mariadb容器</h1><pre><code>docker exec -it mariadb-master bash\n</code></pre><h1 id=\"6-配置mysql-master用户授权\"><a href=\"#6-配置mysql-master用户授权\" class=\"headerlink\" title=\"6.配置mysql master用户授权\"></a>6.配置mysql master用户授权</h1><pre><code>mysql -uroot -p\ngrant replication slave,replication client on *.* to &#39;repluser&#39;@&#39;shangserver004&#39; identified by &#39;replpassword&#39;;\nflush privileges;\nshow master status;\n</code></pre><h2 id=\"slave部署\"><a href=\"#slave部署\" class=\"headerlink\" title=\"slave部署\"></a>slave部署</h2><h1 id=\"1-创建mariadb数据配置文件-1\"><a href=\"#1-创建mariadb数据配置文件-1\" class=\"headerlink\" title=\"1.创建mariadb数据配置文件\"></a>1.创建mariadb数据配置文件</h1><pre><code>mkdir -p /opt/docker-mariadb/{data,conf.d,script}\n</code></pre><h1 id=\"2-拉取mairadb10-1-10镜像-1\"><a href=\"#2-拉取mairadb10-1-10镜像-1\" class=\"headerlink\" title=\"2.拉取mairadb10.1.10镜像\"></a>2.拉取mairadb10.1.10镜像</h1><pre><code>docker pull mariadb:10.1.10\n</code></pre><h1 id=\"3-创建mariadb配置文件-1\"><a href=\"#3-创建mariadb配置文件-1\" class=\"headerlink\" title=\"3.创建mariadb配置文件\"></a>3.创建mariadb配置文件</h1><pre><code>tee /opt/docker-mariadb/conf.d/my.cnf &lt;&lt;EOF\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/run/mysqld/mysqld.sock\nserver-id = 2\n#log_bin=slave-bin\n#binlog_format=row\nrelay-log=relay-bin\nexpire_logs_days = 30\nread-only = on\nsync_binlog = 1\ndefault-storage-engine=INNODB\n#sync_relay_log = 1\n#sync_relay_log_info = 1\ninnodb_file_per_table = ON\ncharacter-set-server=utf8mb4\nslow_query_log = 1\nlong_query_time = 2\nlog_output = &#39;TABLE&#39;\n[mysql]\ndefault-character-set=utf8mb4\nauto-rehash\n\n[mysqld_safe]\nlog-error=/var/log/mysql.log\npid-file=/run/mysqld/mysqld.pid\nEOF\n</code></pre><h1 id=\"4-创建运行脚本-1\"><a href=\"#4-创建运行脚本-1\" class=\"headerlink\" title=\"4.创建运行脚本\"></a>4.创建运行脚本</h1><pre><code>tee /opt/docker-mariadb/script/mariadb.sh&lt;&lt;EOF\n#!/bin/bash\ndocker run -tid \\\n--restart=always \\\n--name mariadb-slave \\\n-p 3307:3306 \\\n-v /opt/docker-mariadb/data:/var/lib/mysql \\\n-v /opt/docker-mariadb/conf.d:/etc/mysql/conf.d \\\n-e MYSQL_ROOT_PASSWORD=123456 \\\nmariadb:10.1.10\nEOF\n</code></pre><p>查看docker容器运行状态</p>\n<pre><code>docker ps -a\n</code></pre><h1 id=\"5-进入mariadb容器-1\"><a href=\"#5-进入mariadb容器-1\" class=\"headerlink\" title=\"5.进入mariadb容器\"></a>5.进入mariadb容器</h1><pre><code>docker exec -it mariadb-slave bash\n</code></pre><h1 id=\"6-配置mysql-slave\"><a href=\"#6-配置mysql-slave\" class=\"headerlink\" title=\"6.配置mysql slave\"></a>6.配置mysql slave</h1><pre><code>mysql -uroot -p\n</code></pre><pre><code>change master to\nmaster_host=&#39;192.168.1.14&#39;,\nmaster_port=3307,\nmaster_user=&#39;repluser&#39;,\nmaster_password=&#39;replpassword&#39;,\nmaster_log_file=&#39;master-bin.000001&#39;,\nmaster_log_pos=674,\nmaster_connect_retry=5,\nmaster_heartbeat_period=2;\n</code></pre><pre><code>star slave;\n</code></pre><pre><code>show status slave;\n</code></pre>"},{"title":"docker-nginx-php部署","date":"2018-04-09T04:38:29.000Z","description":null,"copyright":true,"_content":"前言\nnginx是web服务器常用的架构,是一个高性能的HTTP和反向代理服务器,也是一个IMAP/POP3/SMTP服务器。\n<!--more-->\n服务器环境\nnignx:基于docker最新版nginx\nphp:7.1.5\n\n# 1.拉取nginx和php-fpm镜像\n```\ndocker pull nginx\n```\ndocker pull php:7.1.5-fpm #自定义版本\n```\ndocker pull bitnami/php-fpm\n```\n# 2.创建nginx数据目录\n```\nmkdir -p /opt/nginx/{conf,conf.d,html,log}\nmkdir -p /opt/php/conf\n```\n# 3.创建nginx default.conf,此配置是支持go语言的反向代理\n```\ncat /opt/nginx/conf.d/default.conf << EOF\nmap $http_upgrade $connection_upgrade {\n        default upgrade;\n        ''      close;\n}\nupstream gameweb {\n        ip_hash;\n        server 192.168.1.14:3001 weight=2;\n        server 192.168.1.14:3002;\n}\nserver\n{\n    listen 3003;\n    server_name master.localhost.com;\n    error_log /var/log/nginx/gameweb_error.log debug;\n    access_log /var/log/nginx/gameweb_access.log;\n\n\nlocation / {\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_pass http://gameweb;\n\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Credentials true;\n        add_header Access-Control-Allow-Headers Content-Type,Accept;\n        add_header Access-Control-Allow-Methods GET;\n       \n    }\n\n}\n\nserver {\n        listen       80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        location / {\n            index  index.html index.htm index.php;\n            autoindex  off;\n        }\n        location ~ \\.php(.*)$ {\n            root           /usr/share/nginx/html/;\n            fastcgi_pass   php:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n            include        fastcgi_params;\n        }\n}\nEOF\n```\n# 4.配置php测试文件\n```\ntee /opt/nginx/html/index.php <<EOF\n<?php\necho \"TEST PAGE\"\n?>\nEOF\n\n# 5.启动php容器\n```\ndocker run -tid \\\n-p 9000:9000 \\\n--name php-fpm \\\n--restart=always \\\n--privileged=true \\\n-v /opt/php/conf/:/bitnami/php/conf/ \\\n-v /opt/nginx/html:/usr/share/nginx/html \\\nbitnami/php-fpm\n```\n# 6.启动nginx容器\n```\ndocker run -tid \\\n--name nginx \\\n--restart=always \\\n-p 80:80 \\\n--privileged=true \\\n-v /opt/nginx/conf.d:/etc/nginx/conf.d \\\n-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /opt/nginx/html:/usr/share/nginx/html \\\n-v /opt/nginx/log:/var/log/nginx \\\n--link php-fpm:php \\\nnginx\n```","source":"_posts/docker-nginx-php部署.md","raw":"---\ntitle: docker-nginx-php部署\ndate: 2018-04-09 12:38:29\ndescription:\ncategories: dockers\ntags: [docker, nginx, php, linux自动化运维]\ncopyright: true\n---\n前言\nnginx是web服务器常用的架构,是一个高性能的HTTP和反向代理服务器,也是一个IMAP/POP3/SMTP服务器。\n<!--more-->\n服务器环境\nnignx:基于docker最新版nginx\nphp:7.1.5\n\n# 1.拉取nginx和php-fpm镜像\n```\ndocker pull nginx\n```\ndocker pull php:7.1.5-fpm #自定义版本\n```\ndocker pull bitnami/php-fpm\n```\n# 2.创建nginx数据目录\n```\nmkdir -p /opt/nginx/{conf,conf.d,html,log}\nmkdir -p /opt/php/conf\n```\n# 3.创建nginx default.conf,此配置是支持go语言的反向代理\n```\ncat /opt/nginx/conf.d/default.conf << EOF\nmap $http_upgrade $connection_upgrade {\n        default upgrade;\n        ''      close;\n}\nupstream gameweb {\n        ip_hash;\n        server 192.168.1.14:3001 weight=2;\n        server 192.168.1.14:3002;\n}\nserver\n{\n    listen 3003;\n    server_name master.localhost.com;\n    error_log /var/log/nginx/gameweb_error.log debug;\n    access_log /var/log/nginx/gameweb_access.log;\n\n\nlocation / {\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_pass http://gameweb;\n\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Credentials true;\n        add_header Access-Control-Allow-Headers Content-Type,Accept;\n        add_header Access-Control-Allow-Methods GET;\n       \n    }\n\n}\n\nserver {\n        listen       80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        location / {\n            index  index.html index.htm index.php;\n            autoindex  off;\n        }\n        location ~ \\.php(.*)$ {\n            root           /usr/share/nginx/html/;\n            fastcgi_pass   php:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n            include        fastcgi_params;\n        }\n}\nEOF\n```\n# 4.配置php测试文件\n```\ntee /opt/nginx/html/index.php <<EOF\n<?php\necho \"TEST PAGE\"\n?>\nEOF\n\n# 5.启动php容器\n```\ndocker run -tid \\\n-p 9000:9000 \\\n--name php-fpm \\\n--restart=always \\\n--privileged=true \\\n-v /opt/php/conf/:/bitnami/php/conf/ \\\n-v /opt/nginx/html:/usr/share/nginx/html \\\nbitnami/php-fpm\n```\n# 6.启动nginx容器\n```\ndocker run -tid \\\n--name nginx \\\n--restart=always \\\n-p 80:80 \\\n--privileged=true \\\n-v /opt/nginx/conf.d:/etc/nginx/conf.d \\\n-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /opt/nginx/html:/usr/share/nginx/html \\\n-v /opt/nginx/log:/var/log/nginx \\\n--link php-fpm:php \\\nnginx\n```","slug":"docker-nginx-php部署","published":1,"updated":"2018-04-09T05:50:55.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfrvzqkr0005cojfxk6yt1eb","content":"<p>前言<br>nginx是web服务器常用的架构,是一个高性能的HTTP和反向代理服务器,也是一个IMAP/POP3/SMTP服务器。<br><a id=\"more\"></a><br>服务器环境<br>nignx:基于docker最新版nginx<br>php:7.1.5</p>\n<h1 id=\"1-拉取nginx和php-fpm镜像\"><a href=\"#1-拉取nginx和php-fpm镜像\" class=\"headerlink\" title=\"1.拉取nginx和php-fpm镜像\"></a>1.拉取nginx和php-fpm镜像</h1><pre><code>docker pull nginx\n</code></pre><p>docker pull php:7.1.5-fpm #自定义版本</p>\n<pre><code>docker pull bitnami/php-fpm\n</code></pre><h1 id=\"2-创建nginx数据目录\"><a href=\"#2-创建nginx数据目录\" class=\"headerlink\" title=\"2.创建nginx数据目录\"></a>2.创建nginx数据目录</h1><pre><code>mkdir -p /opt/nginx/{conf,conf.d,html,log}\nmkdir -p /opt/php/conf\n</code></pre><h1 id=\"3-创建nginx-default-conf-此配置是支持go语言的反向代理\"><a href=\"#3-创建nginx-default-conf-此配置是支持go语言的反向代理\" class=\"headerlink\" title=\"3.创建nginx default.conf,此配置是支持go语言的反向代理\"></a>3.创建nginx default.conf,此配置是支持go语言的反向代理</h1><pre><code>cat /opt/nginx/conf.d/default.conf &lt;&lt; EOF\nmap $http_upgrade $connection_upgrade {\n        default upgrade;\n        &#39;&#39;      close;\n}\nupstream gameweb {\n        ip_hash;\n        server 192.168.1.14:3001 weight=2;\n        server 192.168.1.14:3002;\n}\nserver\n{\n    listen 3003;\n    server_name master.localhost.com;\n    error_log /var/log/nginx/gameweb_error.log debug;\n    access_log /var/log/nginx/gameweb_access.log;\n\n\nlocation / {\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_pass http://gameweb;\n\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Credentials true;\n        add_header Access-Control-Allow-Headers Content-Type,Accept;\n        add_header Access-Control-Allow-Methods GET;\n\n    }\n\n}\n\nserver {\n        listen       80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        location / {\n            index  index.html index.htm index.php;\n            autoindex  off;\n        }\n        location ~ \\.php(.*)$ {\n            root           /usr/share/nginx/html/;\n            fastcgi_pass   php:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n            include        fastcgi_params;\n        }\n}\nEOF\n</code></pre><h1 id=\"4-配置php测试文件\"><a href=\"#4-配置php测试文件\" class=\"headerlink\" title=\"4.配置php测试文件\"></a>4.配置php测试文件</h1><pre><code>tee /opt/nginx/html/index.php &lt;&lt;EOF\n&lt;?php\necho &quot;TEST PAGE&quot;\n?&gt;\nEOF\n\n# 5.启动php容器\n</code></pre><p>docker run -tid \\<br>-p 9000:9000 \\<br>–name php-fpm \\<br>–restart=always \\<br>–privileged=true \\<br>-v /opt/php/conf/:/bitnami/php/conf/ \\<br>-v /opt/nginx/html:/usr/share/nginx/html \\<br>bitnami/php-fpm</p>\n<pre><code># 6.启动nginx容器\n</code></pre><p>docker run -tid \\<br>–name nginx \\<br>–restart=always \\<br>-p 80:80 \\<br>–privileged=true \\<br>-v /opt/nginx/conf.d:/etc/nginx/conf.d \\<br>-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\<br>-v /opt/nginx/html:/usr/share/nginx/html \\<br>-v /opt/nginx/log:/var/log/nginx \\<br>–link php-fpm:php \\<br>nginx<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"<p>前言<br>nginx是web服务器常用的架构,是一个高性能的HTTP和反向代理服务器,也是一个IMAP/POP3/SMTP服务器。<br>","more":"<br>服务器环境<br>nignx:基于docker最新版nginx<br>php:7.1.5</p>\n<h1 id=\"1-拉取nginx和php-fpm镜像\"><a href=\"#1-拉取nginx和php-fpm镜像\" class=\"headerlink\" title=\"1.拉取nginx和php-fpm镜像\"></a>1.拉取nginx和php-fpm镜像</h1><pre><code>docker pull nginx\n</code></pre><p>docker pull php:7.1.5-fpm #自定义版本</p>\n<pre><code>docker pull bitnami/php-fpm\n</code></pre><h1 id=\"2-创建nginx数据目录\"><a href=\"#2-创建nginx数据目录\" class=\"headerlink\" title=\"2.创建nginx数据目录\"></a>2.创建nginx数据目录</h1><pre><code>mkdir -p /opt/nginx/{conf,conf.d,html,log}\nmkdir -p /opt/php/conf\n</code></pre><h1 id=\"3-创建nginx-default-conf-此配置是支持go语言的反向代理\"><a href=\"#3-创建nginx-default-conf-此配置是支持go语言的反向代理\" class=\"headerlink\" title=\"3.创建nginx default.conf,此配置是支持go语言的反向代理\"></a>3.创建nginx default.conf,此配置是支持go语言的反向代理</h1><pre><code>cat /opt/nginx/conf.d/default.conf &lt;&lt; EOF\nmap $http_upgrade $connection_upgrade {\n        default upgrade;\n        &#39;&#39;      close;\n}\nupstream gameweb {\n        ip_hash;\n        server 192.168.1.14:3001 weight=2;\n        server 192.168.1.14:3002;\n}\nserver\n{\n    listen 3003;\n    server_name master.localhost.com;\n    error_log /var/log/nginx/gameweb_error.log debug;\n    access_log /var/log/nginx/gameweb_access.log;\n\n\nlocation / {\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_pass_header Server;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Scheme $scheme;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Nginx-Proxy true;\n        proxy_pass http://gameweb;\n\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Credentials true;\n        add_header Access-Control-Allow-Headers Content-Type,Accept;\n        add_header Access-Control-Allow-Methods GET;\n\n    }\n\n}\n\nserver {\n        listen       80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        location / {\n            index  index.html index.htm index.php;\n            autoindex  off;\n        }\n        location ~ \\.php(.*)$ {\n            root           /usr/share/nginx/html/;\n            fastcgi_pass   php:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n            include        fastcgi_params;\n        }\n}\nEOF\n</code></pre><h1 id=\"4-配置php测试文件\"><a href=\"#4-配置php测试文件\" class=\"headerlink\" title=\"4.配置php测试文件\"></a>4.配置php测试文件</h1><pre><code>tee /opt/nginx/html/index.php &lt;&lt;EOF\n&lt;?php\necho &quot;TEST PAGE&quot;\n?&gt;\nEOF\n\n# 5.启动php容器\n</code></pre><p>docker run -tid \\<br>-p 9000:9000 \\<br>–name php-fpm \\<br>–restart=always \\<br>–privileged=true \\<br>-v /opt/php/conf/:/bitnami/php/conf/ \\<br>-v /opt/nginx/html:/usr/share/nginx/html \\<br>bitnami/php-fpm</p>\n<pre><code># 6.启动nginx容器\n</code></pre><p>docker run -tid \\<br>–name nginx \\<br>–restart=always \\<br>-p 80:80 \\<br>–privileged=true \\<br>-v /opt/nginx/conf.d:/etc/nginx/conf.d \\<br>-v /opt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\<br>-v /opt/nginx/html:/usr/share/nginx/html \\<br>-v /opt/nginx/log:/var/log/nginx \\<br>–link php-fpm:php \\<br>nginx<br><code>`</code></p>"},{"title":"docker_swarm集群","date":"2018-04-08T03:17:05.000Z","_content":"前言\nSwarm项目是Docker公司发布三剑客中的一员，用来提供容器集群服务，目的是更好的帮助用户管理多个Docker Engine，方便用户使用，像使用Docker Engine一样使用容器集群服务。这次分享内容从Swarm项目现状、Swarm社区现状和Swarm未来的一些规划三方面介绍Swarm，目的是能让大家对Swarm有个完整的认识，并且希望更多的人采用到Swarm项目中来。\n此文主要是swarm docker集群部署，仅供参考\n<!--more-->\n\n环境：centos7.2\n192.168.1.14 master swarm-manager rethinkdb controller swarm-agent consul-s1 registrator consul-template(nginx)\n192.168.1.15 slave-1 registrator swarm-agent consul-s2\n192.168.1.16 slave-2 registrator swarm-agent consul-s3\ndocker-engine\t17.05.0-ce\n\n## 一、搭建docker集群环境\n# 1、先检查是否安装旧版本docker\n```\nrpm -qa|grep docker\n```\n如果有就先卸载\n```\nyum remove docker*\n```\n# 2、添加docker.repo安装源，写入文件\n```\ntee /etc/yum.repos.d/docker.repo<<EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n```\n# 3、安装docker\n```\nyum install docker-engine\n```\n# 4、配置防火墙\n```\nfirewall-cmd --permanent --add-port={2375/tcp,3375/tcp,8500/tcp,8300/tcp,8301/tcp,8301/udp,8302/tcp,8302/udp,8400/tcp,8500/tcp,8600/tcp,8600/udp,8080/tcp,28015/tcp,29015/tcp}\nfirewall-cmd --reload\nfirewall-cmd --list-all\n```\n# iptables内容（使用的iptables）\n```\n*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.168.0.0/16 ! -o docker0 -j MASQUERADE\nCOMMIT\n#\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:DOCKER - [0:0]\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 2375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8300 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8301 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8301 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8302 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8302 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8400 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8500 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8600 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8600 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 28015 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 29015 -j ACCEPT\n#-A INPUT -j REJECT --reject-with icmp-host-prohibited\n#-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n```\n# 5、增加tcp监听端口,并配置docker加速\n修改/lib/systemd/system/docker.service\ndaocloud加速\n```\nsed -i 's/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --live-restore/g' /lib/systemd/system/docker.service\n```\n私库\n```\nsed -i 's/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --insecure-registry 192.168.1.14\\:5000 --live-restore/g' /lib/systemd/system/docker.service\n```\n阿里云加速\n```\nsed -i 's/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=https\\:\\/\\/0xl18ug0.mirror.aliyuncs.com --live-restore/g' /lib/systemd/system/docker.service\n```\n\n# 6、重启docker\n```\nsystemctl daemon-reload\nsystemctl enable docker.service\nsystemctl restart docker.service\nps -ef |grep docker  #能看到docker启动以及2375端口\n```\n#7、安装pip以及docker api\n```\nyum -y install epel-release\nyum -y install python-pip\npip install docker-py docker-compose\n```\n# 8、创建consul用户及组\n```\ngroupadd -g 1005 consul\nuseradd -u 105 -g 1005 -s /bin/false consul\n```\n# 9、创建consul数据存储文件夹\n```\nmkdir -p /opt/consul/{data,conf}\nchown -R consul: /opt/consul\n```\n# 10、设置主机hosts，有多少台主机，就需要设置多少hosts\n```\nvim /etc/hosts\n192.168.1.14    master.localhost.com\n192.168.1.15    slave1.localhost.com\n192.168.1.16    slave2.localhost.com\n```\n## 二、配置consul cluster\n\n# 1、拉取consul镜像\n```\ndocker pull progrium/consul\n```\n#提示：目录没有官方出consul镜像，以上consul镜像是官方推荐的第三方docker image\n\n# 2、启动consul server 192.168.1.14\n```\ndocker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h $HOSTNAME \\\n--restart=always \\\n--name=consul-s1 \\\nprogrium/consul \\\n-server -bootstrap-expect=1 \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.14\n```\n# 3、启动consul server 192.168.1.15\n```\ndocker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-s2 \\\n--restart=always \\\n--name=consul-s2 \\\nprogrium/consul \\\n-server \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.15 -join 192.168.1.14\n```\n# 4、启动consul client 192.168.1.16\n```\ndocker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-c1 \\\n--restart=always \\\n--name=consul-c1 \\\nprogrium/consul \\\n-advertise 192.168.1.16 -join 192.168.1.14\n```\n## 三、registrator状态获取\n依次启动\n```\ndocker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.14 \\\nconsul://192.168.1.14:8500\n```\n```\ndocker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.15 \\\nconsul://192.168.1.15:8500\n```\n```\ndocker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.16 \\\nconsul://192.168.1.16:8500\n```\n## 四、安装shipyard、swarm\n1、192.168.1.14\n```\ndocker run -tid \\\n-p 3375:3375 \\\n--restart=always \\\n--name shipyard-swarm-manager \\\nswarm:latest \\\nmanage --host tcp://0.0.0.0:3375 consul://192.168.1.14:8500\n```\n```\ndocker run -tid \\\n--restart=always \\\n--name=shipyard-rethinkdb \\\n-p 28015:28015 \\\n-p 29015:29015 \\\n-v /opt/rethinkdb:/data \\\nindex.tenxcloud.com/docker_library/rethinkdb\n```\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-controller \\\n--link shipyard-rethinkdb:rethinkdb \\\n--link shipyard-swarm-manager:swarm \\\n-p 8080:8080 \\\ndockerclub/shipyard:latest \\\nserver \\\n-d tcp://swarm:3375\n```\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.14:2375 consul://192.168.1.14:8500\n```\n# 2、安装swarm-agent\n主机192.168.1.15操作\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.15:2375 consul://192.168.1.14:8500\n```\n主机192.168.1.16操作\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.16:2375 consul://192.168.1.14:8500\n```\n## 五、安装haproxy或者nginx（192.168.1.14）\n# 1、安装haproxy\n```\nyum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\nopenssl openssl-devel make autoconf automake libtool bison libxml2 \\\nlibxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\ncmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\nlibjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\npcre-devel curl-devel libmcrypt libmcrypt-devel\n\ncd /tmp\nwget http://www.haproxy.org/download/1.7/src/haproxy-1.7.0.tar.gz\ntar -xvf /tmp/haproxy-1.7.0.tar.gz \nmake TARGET=linux31 PREFIX=/opt/haproxy\nmake install PREFIX=/opt/haproxy\n```\n# 2、配置haproxy.conf\n```\nvim /opt/haproxy/conf/haproxy.conf\nglobal\n                log 127.0.0.1   local0\n                #log 127.0.0.1  local1 notice\n                #log loghost    local0 info\n                maxconn 50000\n                chroot /opt/haproxy\n                uid 99\n                gid 99\n \n                daemon\n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid\n                #debug\n                #quiet\n \n defaults\n                mode    tcp\n                option  dontlognull\n                option  forwardfor\n                option  redispatch\n                retries 2\n                balance static-rr\n                stats enable\n                stats uri /ha?stats  #haproxy运行状态查看 自定义uri\n                timeout connect     3000\n                timeout client      50000\n                timeout server 50000\n \nlisten admin_stat\n        # 监听端口\n        bind *:8888\n        # http的7层模式\n        mode http\n        #log global\n        # 统计页面自动刷新时间\n        stats refresh 30s\n        # 统计页面URL\n        stats uri /admin?stats\n        # 统计页面密码框上提示文本\n        stats realm Haproxy\\ Statistics\n        # 统计页面用户名和密码设置\n        stats auth admin:admin\n        # 隐藏统计页面上HAProxy的版本信息\n        #stats hide-version\n \nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        option httpchk\n        #maxconn 50000\n        #log 127.0.0.1 local0 debug\n```\n# 3、haproxy启动脚本 /etc/init.d/haproxy\n```\n#! /bin/bash\n# chkconfig: - 85 15\n# description: haproxy is a World Wide Web server. It is used to serve\nPROGDIR=/opt/haproxy\nPROGNAME=haproxy\nDAEMON=$PROGDIR/sbin/$PROGNAME\nCONFIG=$PROGDIR/conf/$PROGNAME.conf\nPIDFILE=$PROGDIR/run/$PROGNAME.pid\nDESC=\"HAProxy daemon\"\nSCRIPTNAME=/opt/haproxy/init.d/$PROGNAME\n# Gracefully exit if the package has been removed.\ntest -x $DAEMON || exit 0\nstart()\n {\n    echo -n \"Starting $DESC: $PROGNAME\"\n   $DAEMON -f $CONFIG\n   echo \".\"\n        }\nstop()\n {  echo -n \"Stopping $DESC: $PROGNAME\"\n    cat $PIDFILE | xargs kill\n    echo \".\"\n}\n \nreload()\n { echo -n \"reloading $DESC: $PROGNAME\"\n   $DAEMON -f $CONFIG -p $PIDFILE -sf $(cat $PIDFILE)\n}\ncase \"$1\" in\n  start)\n  start\n  ;;\n stop)\n  stop\n   ;;\n reload)\n reload\n   ;;\n*)\n echo \"Usage: $SCRIPTNAME {start|stop|reload}\" >&2\n exit 1\n ;;\nesac\nexit 0\n```\n# 4、启动haproxy,并加入到开启启动\n```\nchmod +x /etc/init.d/haproxy\nchkconfig haproxy op\nservice haproxy start\n```\n# 5、安装nginx 并支持数字证书\n```\nyum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\n openssl openssl-devel make autoconf automake libtool bison libxml2 \\\n libxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\n cmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\n libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\n pcre-devel curl-devel libmcrypt libmcrypt-devel\n ```\n# 6、下载安装openssl\n```\n cd /tmp\nwget https://www.openssl.org/source/openssl-1.1.0c.tar.gz\n tar -xvf openssl-1.1.0c.tar.gz\n cd /tmp/openssl-1.1.0c\n./config   --openssldir=/usr/local/ssl\nmake && make install\n./config shared  --openssldir=/usr/local/ssl\nmake clean\nmake && make install\n```\n# 7、下载安装 nginx\n```\ncd /tmp\nwget http://nginx.org/download/nginx-1.11.7.tar.gz\ngroupadd -r nginx\nuseradd -g nginx -r nginx -s /bin/false\ntar -xvf nginx-1.11.7.tar.gz\ncd /tmp/nginx-1.11.7\n./configure --prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n--user=nginx \\\n--group=nginx \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_random_index_module \\\n--with-http_secure_link_module \\\n--with-http_stub_status_module \\\n--with-http_auth_request_module \\\n--with-threads \\\n--with-stream \\\n--with-openssl=/tmp/openssl-1.1.0c \\\n--with-stream_ssl_module \\\n--with-http_slice_module \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-file-aio \\\n--with-http_v2_module \\\n--with-ipv6 \n\nmkdir -pv /var/cache/nginx/{client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp}\nmkdir -p /etc/nginx/conf.d\nmake && make install\n```\n# 8、nginx配置文件\n修改/etc/nginx/nginx.conf\nuser  nginx;\nworker_processes  1;\n \nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n \nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n \n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n \n    access_log  /var/log/nginx/access.log  main;\n \n    sendfile        on;\n    tcp_nopush     on;\n \n    keepalive_timeout  65;\n    gzip  on;\n    include /etc/nginx/conf.d/*.conf;\n}\n\n添加nginx默认web配置文件\n/etc/nginx/conf.d/default.conf\nserver {\n        listen       80;\n        server_name  localhost;\n \n        #charset koi8-r;\n \n        #access_log  logs/host.access.log  main;\n \n        location / {\n            root   /usr/local/nginx/html;\n            index  index.php index.html index.htm;\n        }\n \n        #error_page  404              /404.html;\n \n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n \n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n \n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        location ~ \\.php$ {\n            root           /usr/local/nginx/html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n        location ~* ^.+\\.(jpg|jpeg|gif|png|bmp)$ {\n            access_log  off;\n            root        opencart;\n            expires     30d;\n                        break;\n        }\n}\n\n# 9、创建nginx启动脚本 /etc/init.d/nginx\n```\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n \nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\n \nEXEC=/usr/sbin/nginx\nPIDFILE=/var/run/nginx.pid\nCONF=\"/etc/nginx/nginx.conf\"\nAUTH=\"1234\"\n \ncase \"$1\" in\n        start)\n                if [ -f $PIDFILE ]\n                then\n                        echo \"$PIDFILE exists, process is already running or crashed.\"\n                else\n                        echo \"Starting nginx server...\"\n                        $EXEC &\n                fi\n                if [ \"$?\"=\"0\" ]\n                then\n                        echo \"nginx is running...\"\n                fi\n                ;;\n        stop)\n                if [ ! -f $PIDFILE ]\n                then\n                        echo \"$PIDFILE exists, process is not running.\"\n                else\n                        PID=$(cat $PIDFILE)\n                        echo \"Stopping...\"\n                        kill -9 $PID\n                        PID=$(pidof nginx)\n                        kill -9 $PID\n                        rm -rf /var/run/nginx.pid\n                        sleep 2\n                       while [ -x $PIDFILE ]\n                       do\n                                echo \"Waiting for nginx to shutdown...\"\n                               sleep 1\n                        done\n                        echo \"nginx stopped\"\n                fi\n                ;;\n        restart|reload)\n                ${0} stop\n                ${0} start\n                ;;\n        *)\n               echo \"Usage: /etc/init.d/nginx {start|stop|restart|reload}\" >&2\n                exit 1\nesac\n```\n# 10、设置nginx开机启动\n```\nchmod +x /etc/init.d/nginx\nchkconfig nginx on\nservice nginx start\n```\n## 六、安装consul-template 实现服务自动发现\n# 1、下载consul-template\n```\ncd /tmp\nwget https://releases.hashicorp.com/consul-template/0.16.0/consul-template_0.16.0_linux_amd64.zip\nyum -y install unzip\nunzip /tmp/consul-template_0.16.0_linux_amd64.zip -d /usr/bin/\n```\n# 2、consul-template haproxy配置\n```\ncat > /opt/consul/conf/haproxy_ctmpl.json << EOF\nconsul = \"127.0.0.1:8500\"\n   \ntemplate {\n  source = \"/opt/haproxy/conf/haproxy.ctmpl\"\n  destination = \"/opt/haproxy/conf/haproxy.conf\"\n  command = \"/etc/init.d/haproxy reload\"\n}\nEOF\n\n3、haproxy.ctmpl配置 /opt/haproxy/conf/haproxy.ctmpl\nglobal  \n                log 127.0.0.1   local0  \n                #log 127.0.0.1  local1 notice  \n                #log loghost    local0 info  \n                maxconn 50000  \n                chroot /opt/haproxy\n                uid 99  \n                gid 99 \n \n                daemon  \n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid  \n                #debug  \n                #quiet  \n    \n defaults  \n                mode    tcp  \n                option  dontlognull  \n                option  forwardfor  \n                option  redispatch  \n                retries 2  \n                balance static-rr\n                stats enable\n                stats uri /ha?stats \n                timeout connect     3000  \n                timeout client      50000  \n                timeout server 50000  \n\nlisten admin_stat  \n        bind *:8888    \n        mode http  \n        #log global   \n        stats refresh 30s  \n        stats uri /admin?stats  \n        stats realm Haproxy\\ Statistics \n        stats auth admin:admin \n        #stats hide-version  \n \nfrontend www\n         bind *:80\n         mode http\n         acl apache  hdr(HOST) apache.zone.com\n         acl nginx   hdr(HOST) nginx.zone.com\n         use_backend apache.qkazone.com if apache\n         use_backend nginx.qkazone.com if nginx\nbackend apache.zone.com\n        balance         roundrobin\n        mode            http\n{{range service \"apache-php-80\"}}\n        server  apache {{.Address}}:{{.Port}} check {{end}}\n \nbackend nginx.zone.com\n        mode http\n        balance         roundrobin\n{{range service \"nginx-80\"}}\n        server  nginx {{.Address}}:{{.Port}} check {{end}}\n \nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        #log 127.0.0.1 local0 debug\n        {{range service \"centos7\"}}\n        server  ssh {{.Address}}:{{.Port}} check {{end}}\n```\n# 4、配置consul-template  haproxy 启动脚本 /etc/init.d/haproxy_ctmpl\n```\n#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n \nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=\"/opt/consul/conf/haproxy_ctmpl.json\"\ncase \"$1\" in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n               if [ -n \"$PID\"   ]\n                   then\n                     echo \"haproxy_ctmpl is running...\"\n              else\n                echo \"Starting haproxy_ctmpl server...\"\n                        $EXEC -config $CONF > /tmp/haproxy_ctmpl.out 2>&1 &\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n            if [  -n \"$PID\" ]\n                 then\n                        echo \"Stopping...\"\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo \"haproxy_ctmpl exists, process is not running.\"\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo \"Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}\" >&2\n                exit 1\nesac\n```\n# 5、设置开机启动，启动\n```\nchmod +x /etc/init.d/haproxy_ctmpl\nchkconfig haproxy_ctmpl on\nservice haproxy_ctmpl start\n```\n# 6、consul-template  nginx配置 /opt/consul/conf/nginx_ctmpl.json\n```\ncat > /opt/consul/conf/nginx_ctmpl.json << EOF\nconsul = \"127.0.0.1:8500\"\n   \ntemplate {\n  source = \"/etc/nginx/conf.d/nginx_web.ctmpl\"\n  destination = \"/etc/nginx/conf.d/nginx_web.conf\"\n  command = \"/usr/sbin/nginx  -s reload\"\n}\nEOF\n```\n# 7、/etc/nginx/conf.d/nginx_web.ctmpl 配置\n```\nupstream apache {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"apache-php-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name apache.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding '';\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://apache/;\n    }\n}\nupstream nginx {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"nginx-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name nginx.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding '';\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://nginx/;\n    }\n}\n```\n# 8、配置consul-template  nginx启动脚本 /etc/init.d/nginx_ctmpl\n```\n#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=\"/opt/consul/conf/nginx_ctmpl.json\"\ncase \"$1\" in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n               if [ -n \"$PID\"   ]\n                   then\n                     echo \"haproxy_ctmpl is running...\"\n              else\n                echo \"Starting haproxy_ctmpl server...\"\n                        $EXEC -config $CONF > /tmp/nginx_ctmpl.out 2>&1 &\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n            if [  -n \"$PID\" ]\n                 then\n                        echo \"Stopping...\"\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo \"haproxy_ctmpl exists, process is not running.\"\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo \"Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}\" >&2\n                exit 1\nesac\n```\n# 9、设置开机启动\n```\nchmod +x /etc/init.d/nginx_ctmpl\nchkconfig nginx_ctmpl on\nservice nginx_ctmpl start\n```\n## 七、测试是否自动发现\n```\ndocker run -ti -d -p :80 eboraas/apache-php \ndocker run -d -ti -p :80 nginx\n```\n1、consul web\nhttp://192.168.1.66:8500/ui/#/dc1/services\n\n2、shipyard web\nhttp://192.168.1.23:8080\n账号admin密码 shipyard\n\n3、haproxy web\nhttp://192.168.1.14:8888/admin?stats\n账号：admin 密码admin\n```\n","source":"_posts/docker-swarm集群.md","raw":"---\ntitle: docker_swarm集群\ndate: 2018-04-08 11:17:05\ncategories: dockers\ntags: [swarm, docker, linux自动化运维]\n---\n前言\nSwarm项目是Docker公司发布三剑客中的一员，用来提供容器集群服务，目的是更好的帮助用户管理多个Docker Engine，方便用户使用，像使用Docker Engine一样使用容器集群服务。这次分享内容从Swarm项目现状、Swarm社区现状和Swarm未来的一些规划三方面介绍Swarm，目的是能让大家对Swarm有个完整的认识，并且希望更多的人采用到Swarm项目中来。\n此文主要是swarm docker集群部署，仅供参考\n<!--more-->\n\n环境：centos7.2\n192.168.1.14 master swarm-manager rethinkdb controller swarm-agent consul-s1 registrator consul-template(nginx)\n192.168.1.15 slave-1 registrator swarm-agent consul-s2\n192.168.1.16 slave-2 registrator swarm-agent consul-s3\ndocker-engine\t17.05.0-ce\n\n## 一、搭建docker集群环境\n# 1、先检查是否安装旧版本docker\n```\nrpm -qa|grep docker\n```\n如果有就先卸载\n```\nyum remove docker*\n```\n# 2、添加docker.repo安装源，写入文件\n```\ntee /etc/yum.repos.d/docker.repo<<EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n```\n# 3、安装docker\n```\nyum install docker-engine\n```\n# 4、配置防火墙\n```\nfirewall-cmd --permanent --add-port={2375/tcp,3375/tcp,8500/tcp,8300/tcp,8301/tcp,8301/udp,8302/tcp,8302/udp,8400/tcp,8500/tcp,8600/tcp,8600/udp,8080/tcp,28015/tcp,29015/tcp}\nfirewall-cmd --reload\nfirewall-cmd --list-all\n```\n# iptables内容（使用的iptables）\n```\n*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.168.0.0/16 ! -o docker0 -j MASQUERADE\nCOMMIT\n#\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:DOCKER - [0:0]\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 2375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8300 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8301 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8301 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8302 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8302 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8400 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8500 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8600 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8600 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 28015 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 29015 -j ACCEPT\n#-A INPUT -j REJECT --reject-with icmp-host-prohibited\n#-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n```\n# 5、增加tcp监听端口,并配置docker加速\n修改/lib/systemd/system/docker.service\ndaocloud加速\n```\nsed -i 's/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --live-restore/g' /lib/systemd/system/docker.service\n```\n私库\n```\nsed -i 's/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --insecure-registry 192.168.1.14\\:5000 --live-restore/g' /lib/systemd/system/docker.service\n```\n阿里云加速\n```\nsed -i 's/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=https\\:\\/\\/0xl18ug0.mirror.aliyuncs.com --live-restore/g' /lib/systemd/system/docker.service\n```\n\n# 6、重启docker\n```\nsystemctl daemon-reload\nsystemctl enable docker.service\nsystemctl restart docker.service\nps -ef |grep docker  #能看到docker启动以及2375端口\n```\n#7、安装pip以及docker api\n```\nyum -y install epel-release\nyum -y install python-pip\npip install docker-py docker-compose\n```\n# 8、创建consul用户及组\n```\ngroupadd -g 1005 consul\nuseradd -u 105 -g 1005 -s /bin/false consul\n```\n# 9、创建consul数据存储文件夹\n```\nmkdir -p /opt/consul/{data,conf}\nchown -R consul: /opt/consul\n```\n# 10、设置主机hosts，有多少台主机，就需要设置多少hosts\n```\nvim /etc/hosts\n192.168.1.14    master.localhost.com\n192.168.1.15    slave1.localhost.com\n192.168.1.16    slave2.localhost.com\n```\n## 二、配置consul cluster\n\n# 1、拉取consul镜像\n```\ndocker pull progrium/consul\n```\n#提示：目录没有官方出consul镜像，以上consul镜像是官方推荐的第三方docker image\n\n# 2、启动consul server 192.168.1.14\n```\ndocker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h $HOSTNAME \\\n--restart=always \\\n--name=consul-s1 \\\nprogrium/consul \\\n-server -bootstrap-expect=1 \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.14\n```\n# 3、启动consul server 192.168.1.15\n```\ndocker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-s2 \\\n--restart=always \\\n--name=consul-s2 \\\nprogrium/consul \\\n-server \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.15 -join 192.168.1.14\n```\n# 4、启动consul client 192.168.1.16\n```\ndocker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-c1 \\\n--restart=always \\\n--name=consul-c1 \\\nprogrium/consul \\\n-advertise 192.168.1.16 -join 192.168.1.14\n```\n## 三、registrator状态获取\n依次启动\n```\ndocker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.14 \\\nconsul://192.168.1.14:8500\n```\n```\ndocker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.15 \\\nconsul://192.168.1.15:8500\n```\n```\ndocker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.16 \\\nconsul://192.168.1.16:8500\n```\n## 四、安装shipyard、swarm\n1、192.168.1.14\n```\ndocker run -tid \\\n-p 3375:3375 \\\n--restart=always \\\n--name shipyard-swarm-manager \\\nswarm:latest \\\nmanage --host tcp://0.0.0.0:3375 consul://192.168.1.14:8500\n```\n```\ndocker run -tid \\\n--restart=always \\\n--name=shipyard-rethinkdb \\\n-p 28015:28015 \\\n-p 29015:29015 \\\n-v /opt/rethinkdb:/data \\\nindex.tenxcloud.com/docker_library/rethinkdb\n```\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-controller \\\n--link shipyard-rethinkdb:rethinkdb \\\n--link shipyard-swarm-manager:swarm \\\n-p 8080:8080 \\\ndockerclub/shipyard:latest \\\nserver \\\n-d tcp://swarm:3375\n```\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.14:2375 consul://192.168.1.14:8500\n```\n# 2、安装swarm-agent\n主机192.168.1.15操作\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.15:2375 consul://192.168.1.14:8500\n```\n主机192.168.1.16操作\n```\ndocker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.16:2375 consul://192.168.1.14:8500\n```\n## 五、安装haproxy或者nginx（192.168.1.14）\n# 1、安装haproxy\n```\nyum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\nopenssl openssl-devel make autoconf automake libtool bison libxml2 \\\nlibxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\ncmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\nlibjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\npcre-devel curl-devel libmcrypt libmcrypt-devel\n\ncd /tmp\nwget http://www.haproxy.org/download/1.7/src/haproxy-1.7.0.tar.gz\ntar -xvf /tmp/haproxy-1.7.0.tar.gz \nmake TARGET=linux31 PREFIX=/opt/haproxy\nmake install PREFIX=/opt/haproxy\n```\n# 2、配置haproxy.conf\n```\nvim /opt/haproxy/conf/haproxy.conf\nglobal\n                log 127.0.0.1   local0\n                #log 127.0.0.1  local1 notice\n                #log loghost    local0 info\n                maxconn 50000\n                chroot /opt/haproxy\n                uid 99\n                gid 99\n \n                daemon\n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid\n                #debug\n                #quiet\n \n defaults\n                mode    tcp\n                option  dontlognull\n                option  forwardfor\n                option  redispatch\n                retries 2\n                balance static-rr\n                stats enable\n                stats uri /ha?stats  #haproxy运行状态查看 自定义uri\n                timeout connect     3000\n                timeout client      50000\n                timeout server 50000\n \nlisten admin_stat\n        # 监听端口\n        bind *:8888\n        # http的7层模式\n        mode http\n        #log global\n        # 统计页面自动刷新时间\n        stats refresh 30s\n        # 统计页面URL\n        stats uri /admin?stats\n        # 统计页面密码框上提示文本\n        stats realm Haproxy\\ Statistics\n        # 统计页面用户名和密码设置\n        stats auth admin:admin\n        # 隐藏统计页面上HAProxy的版本信息\n        #stats hide-version\n \nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        option httpchk\n        #maxconn 50000\n        #log 127.0.0.1 local0 debug\n```\n# 3、haproxy启动脚本 /etc/init.d/haproxy\n```\n#! /bin/bash\n# chkconfig: - 85 15\n# description: haproxy is a World Wide Web server. It is used to serve\nPROGDIR=/opt/haproxy\nPROGNAME=haproxy\nDAEMON=$PROGDIR/sbin/$PROGNAME\nCONFIG=$PROGDIR/conf/$PROGNAME.conf\nPIDFILE=$PROGDIR/run/$PROGNAME.pid\nDESC=\"HAProxy daemon\"\nSCRIPTNAME=/opt/haproxy/init.d/$PROGNAME\n# Gracefully exit if the package has been removed.\ntest -x $DAEMON || exit 0\nstart()\n {\n    echo -n \"Starting $DESC: $PROGNAME\"\n   $DAEMON -f $CONFIG\n   echo \".\"\n        }\nstop()\n {  echo -n \"Stopping $DESC: $PROGNAME\"\n    cat $PIDFILE | xargs kill\n    echo \".\"\n}\n \nreload()\n { echo -n \"reloading $DESC: $PROGNAME\"\n   $DAEMON -f $CONFIG -p $PIDFILE -sf $(cat $PIDFILE)\n}\ncase \"$1\" in\n  start)\n  start\n  ;;\n stop)\n  stop\n   ;;\n reload)\n reload\n   ;;\n*)\n echo \"Usage: $SCRIPTNAME {start|stop|reload}\" >&2\n exit 1\n ;;\nesac\nexit 0\n```\n# 4、启动haproxy,并加入到开启启动\n```\nchmod +x /etc/init.d/haproxy\nchkconfig haproxy op\nservice haproxy start\n```\n# 5、安装nginx 并支持数字证书\n```\nyum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\n openssl openssl-devel make autoconf automake libtool bison libxml2 \\\n libxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\n cmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\n libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\n pcre-devel curl-devel libmcrypt libmcrypt-devel\n ```\n# 6、下载安装openssl\n```\n cd /tmp\nwget https://www.openssl.org/source/openssl-1.1.0c.tar.gz\n tar -xvf openssl-1.1.0c.tar.gz\n cd /tmp/openssl-1.1.0c\n./config   --openssldir=/usr/local/ssl\nmake && make install\n./config shared  --openssldir=/usr/local/ssl\nmake clean\nmake && make install\n```\n# 7、下载安装 nginx\n```\ncd /tmp\nwget http://nginx.org/download/nginx-1.11.7.tar.gz\ngroupadd -r nginx\nuseradd -g nginx -r nginx -s /bin/false\ntar -xvf nginx-1.11.7.tar.gz\ncd /tmp/nginx-1.11.7\n./configure --prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n--user=nginx \\\n--group=nginx \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_random_index_module \\\n--with-http_secure_link_module \\\n--with-http_stub_status_module \\\n--with-http_auth_request_module \\\n--with-threads \\\n--with-stream \\\n--with-openssl=/tmp/openssl-1.1.0c \\\n--with-stream_ssl_module \\\n--with-http_slice_module \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-file-aio \\\n--with-http_v2_module \\\n--with-ipv6 \n\nmkdir -pv /var/cache/nginx/{client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp}\nmkdir -p /etc/nginx/conf.d\nmake && make install\n```\n# 8、nginx配置文件\n修改/etc/nginx/nginx.conf\nuser  nginx;\nworker_processes  1;\n \nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n \nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n \n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n \n    access_log  /var/log/nginx/access.log  main;\n \n    sendfile        on;\n    tcp_nopush     on;\n \n    keepalive_timeout  65;\n    gzip  on;\n    include /etc/nginx/conf.d/*.conf;\n}\n\n添加nginx默认web配置文件\n/etc/nginx/conf.d/default.conf\nserver {\n        listen       80;\n        server_name  localhost;\n \n        #charset koi8-r;\n \n        #access_log  logs/host.access.log  main;\n \n        location / {\n            root   /usr/local/nginx/html;\n            index  index.php index.html index.htm;\n        }\n \n        #error_page  404              /404.html;\n \n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n \n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n \n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        location ~ \\.php$ {\n            root           /usr/local/nginx/html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n        location ~* ^.+\\.(jpg|jpeg|gif|png|bmp)$ {\n            access_log  off;\n            root        opencart;\n            expires     30d;\n                        break;\n        }\n}\n\n# 9、创建nginx启动脚本 /etc/init.d/nginx\n```\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n \nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\n \nEXEC=/usr/sbin/nginx\nPIDFILE=/var/run/nginx.pid\nCONF=\"/etc/nginx/nginx.conf\"\nAUTH=\"1234\"\n \ncase \"$1\" in\n        start)\n                if [ -f $PIDFILE ]\n                then\n                        echo \"$PIDFILE exists, process is already running or crashed.\"\n                else\n                        echo \"Starting nginx server...\"\n                        $EXEC &\n                fi\n                if [ \"$?\"=\"0\" ]\n                then\n                        echo \"nginx is running...\"\n                fi\n                ;;\n        stop)\n                if [ ! -f $PIDFILE ]\n                then\n                        echo \"$PIDFILE exists, process is not running.\"\n                else\n                        PID=$(cat $PIDFILE)\n                        echo \"Stopping...\"\n                        kill -9 $PID\n                        PID=$(pidof nginx)\n                        kill -9 $PID\n                        rm -rf /var/run/nginx.pid\n                        sleep 2\n                       while [ -x $PIDFILE ]\n                       do\n                                echo \"Waiting for nginx to shutdown...\"\n                               sleep 1\n                        done\n                        echo \"nginx stopped\"\n                fi\n                ;;\n        restart|reload)\n                ${0} stop\n                ${0} start\n                ;;\n        *)\n               echo \"Usage: /etc/init.d/nginx {start|stop|restart|reload}\" >&2\n                exit 1\nesac\n```\n# 10、设置nginx开机启动\n```\nchmod +x /etc/init.d/nginx\nchkconfig nginx on\nservice nginx start\n```\n## 六、安装consul-template 实现服务自动发现\n# 1、下载consul-template\n```\ncd /tmp\nwget https://releases.hashicorp.com/consul-template/0.16.0/consul-template_0.16.0_linux_amd64.zip\nyum -y install unzip\nunzip /tmp/consul-template_0.16.0_linux_amd64.zip -d /usr/bin/\n```\n# 2、consul-template haproxy配置\n```\ncat > /opt/consul/conf/haproxy_ctmpl.json << EOF\nconsul = \"127.0.0.1:8500\"\n   \ntemplate {\n  source = \"/opt/haproxy/conf/haproxy.ctmpl\"\n  destination = \"/opt/haproxy/conf/haproxy.conf\"\n  command = \"/etc/init.d/haproxy reload\"\n}\nEOF\n\n3、haproxy.ctmpl配置 /opt/haproxy/conf/haproxy.ctmpl\nglobal  \n                log 127.0.0.1   local0  \n                #log 127.0.0.1  local1 notice  \n                #log loghost    local0 info  \n                maxconn 50000  \n                chroot /opt/haproxy\n                uid 99  \n                gid 99 \n \n                daemon  \n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid  \n                #debug  \n                #quiet  \n    \n defaults  \n                mode    tcp  \n                option  dontlognull  \n                option  forwardfor  \n                option  redispatch  \n                retries 2  \n                balance static-rr\n                stats enable\n                stats uri /ha?stats \n                timeout connect     3000  \n                timeout client      50000  \n                timeout server 50000  \n\nlisten admin_stat  \n        bind *:8888    \n        mode http  \n        #log global   \n        stats refresh 30s  \n        stats uri /admin?stats  \n        stats realm Haproxy\\ Statistics \n        stats auth admin:admin \n        #stats hide-version  \n \nfrontend www\n         bind *:80\n         mode http\n         acl apache  hdr(HOST) apache.zone.com\n         acl nginx   hdr(HOST) nginx.zone.com\n         use_backend apache.qkazone.com if apache\n         use_backend nginx.qkazone.com if nginx\nbackend apache.zone.com\n        balance         roundrobin\n        mode            http\n{{range service \"apache-php-80\"}}\n        server  apache {{.Address}}:{{.Port}} check {{end}}\n \nbackend nginx.zone.com\n        mode http\n        balance         roundrobin\n{{range service \"nginx-80\"}}\n        server  nginx {{.Address}}:{{.Port}} check {{end}}\n \nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        #log 127.0.0.1 local0 debug\n        {{range service \"centos7\"}}\n        server  ssh {{.Address}}:{{.Port}} check {{end}}\n```\n# 4、配置consul-template  haproxy 启动脚本 /etc/init.d/haproxy_ctmpl\n```\n#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n \nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=\"/opt/consul/conf/haproxy_ctmpl.json\"\ncase \"$1\" in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n               if [ -n \"$PID\"   ]\n                   then\n                     echo \"haproxy_ctmpl is running...\"\n              else\n                echo \"Starting haproxy_ctmpl server...\"\n                        $EXEC -config $CONF > /tmp/haproxy_ctmpl.out 2>&1 &\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n            if [  -n \"$PID\" ]\n                 then\n                        echo \"Stopping...\"\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo \"haproxy_ctmpl exists, process is not running.\"\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo \"Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}\" >&2\n                exit 1\nesac\n```\n# 5、设置开机启动，启动\n```\nchmod +x /etc/init.d/haproxy_ctmpl\nchkconfig haproxy_ctmpl on\nservice haproxy_ctmpl start\n```\n# 6、consul-template  nginx配置 /opt/consul/conf/nginx_ctmpl.json\n```\ncat > /opt/consul/conf/nginx_ctmpl.json << EOF\nconsul = \"127.0.0.1:8500\"\n   \ntemplate {\n  source = \"/etc/nginx/conf.d/nginx_web.ctmpl\"\n  destination = \"/etc/nginx/conf.d/nginx_web.conf\"\n  command = \"/usr/sbin/nginx  -s reload\"\n}\nEOF\n```\n# 7、/etc/nginx/conf.d/nginx_web.ctmpl 配置\n```\nupstream apache {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"apache-php-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name apache.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding '';\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://apache/;\n    }\n}\nupstream nginx {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"nginx-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name nginx.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding '';\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://nginx/;\n    }\n}\n```\n# 8、配置consul-template  nginx启动脚本 /etc/init.d/nginx_ctmpl\n```\n#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=\"/opt/consul/conf/nginx_ctmpl.json\"\ncase \"$1\" in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n               if [ -n \"$PID\"   ]\n                   then\n                     echo \"haproxy_ctmpl is running...\"\n              else\n                echo \"Starting haproxy_ctmpl server...\"\n                        $EXEC -config $CONF > /tmp/nginx_ctmpl.out 2>&1 &\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep \"$EXEC -config $CONF\" | awk '{print $2}')\n            if [  -n \"$PID\" ]\n                 then\n                        echo \"Stopping...\"\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo \"haproxy_ctmpl exists, process is not running.\"\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo \"Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}\" >&2\n                exit 1\nesac\n```\n# 9、设置开机启动\n```\nchmod +x /etc/init.d/nginx_ctmpl\nchkconfig nginx_ctmpl on\nservice nginx_ctmpl start\n```\n## 七、测试是否自动发现\n```\ndocker run -ti -d -p :80 eboraas/apache-php \ndocker run -d -ti -p :80 nginx\n```\n1、consul web\nhttp://192.168.1.66:8500/ui/#/dc1/services\n\n2、shipyard web\nhttp://192.168.1.23:8080\n账号admin密码 shipyard\n\n3、haproxy web\nhttp://192.168.1.14:8888/admin?stats\n账号：admin 密码admin\n```\n","slug":"docker-swarm集群","published":1,"updated":"2018-04-09T05:51:16.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfrvzqkw0008cojfzx048ert","content":"<p>前言<br>Swarm项目是Docker公司发布三剑客中的一员，用来提供容器集群服务，目的是更好的帮助用户管理多个Docker Engine，方便用户使用，像使用Docker Engine一样使用容器集群服务。这次分享内容从Swarm项目现状、Swarm社区现状和Swarm未来的一些规划三方面介绍Swarm，目的是能让大家对Swarm有个完整的认识，并且希望更多的人采用到Swarm项目中来。<br>此文主要是swarm docker集群部署，仅供参考<br><a id=\"more\"></a></p>\n<p>环境：centos7.2<br>192.168.1.14 master swarm-manager rethinkdb controller swarm-agent consul-s1 registrator consul-template(nginx)<br>192.168.1.15 slave-1 registrator swarm-agent consul-s2<br>192.168.1.16 slave-2 registrator swarm-agent consul-s3<br>docker-engine    17.05.0-ce</p>\n<h2 id=\"一、搭建docker集群环境\"><a href=\"#一、搭建docker集群环境\" class=\"headerlink\" title=\"一、搭建docker集群环境\"></a>一、搭建docker集群环境</h2><h1 id=\"1、先检查是否安装旧版本docker\"><a href=\"#1、先检查是否安装旧版本docker\" class=\"headerlink\" title=\"1、先检查是否安装旧版本docker\"></a>1、先检查是否安装旧版本docker</h1><pre><code>rpm -qa|grep docker\n</code></pre><p>如果有就先卸载</p>\n<pre><code>yum remove docker*\n</code></pre><h1 id=\"2、添加docker-repo安装源，写入文件\"><a href=\"#2、添加docker-repo安装源，写入文件\" class=\"headerlink\" title=\"2、添加docker.repo安装源，写入文件\"></a>2、添加docker.repo安装源，写入文件</h1><pre><code>tee /etc/yum.repos.d/docker.repo&lt;&lt;EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n</code></pre><h1 id=\"3、安装docker\"><a href=\"#3、安装docker\" class=\"headerlink\" title=\"3、安装docker\"></a>3、安装docker</h1><pre><code>yum install docker-engine\n</code></pre><h1 id=\"4、配置防火墙\"><a href=\"#4、配置防火墙\" class=\"headerlink\" title=\"4、配置防火墙\"></a>4、配置防火墙</h1><pre><code>firewall-cmd --permanent --add-port={2375/tcp,3375/tcp,8500/tcp,8300/tcp,8301/tcp,8301/udp,8302/tcp,8302/udp,8400/tcp,8500/tcp,8600/tcp,8600/udp,8080/tcp,28015/tcp,29015/tcp}\nfirewall-cmd --reload\nfirewall-cmd --list-all\n</code></pre><h1 id=\"iptables内容（使用的iptables）\"><a href=\"#iptables内容（使用的iptables）\" class=\"headerlink\" title=\"iptables内容（使用的iptables）\"></a>iptables内容（使用的iptables）</h1><pre><code>*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.168.0.0/16 ! -o docker0 -j MASQUERADE\nCOMMIT\n#\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:DOCKER - [0:0]\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 2375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8300 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8301 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8301 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8302 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8302 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8400 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8500 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8600 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8600 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 28015 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 29015 -j ACCEPT\n#-A INPUT -j REJECT --reject-with icmp-host-prohibited\n#-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n</code></pre><h1 id=\"5、增加tcp监听端口-并配置docker加速\"><a href=\"#5、增加tcp监听端口-并配置docker加速\" class=\"headerlink\" title=\"5、增加tcp监听端口,并配置docker加速\"></a>5、增加tcp监听端口,并配置docker加速</h1><p>修改/lib/systemd/system/docker.service<br>daocloud加速</p>\n<pre><code>sed -i &#39;s/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --live-restore/g&#39; /lib/systemd/system/docker.service\n</code></pre><p>私库</p>\n<pre><code>sed -i &#39;s/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --insecure-registry 192.168.1.14\\:5000 --live-restore/g&#39; /lib/systemd/system/docker.service\n</code></pre><p>阿里云加速</p>\n<pre><code>sed -i &#39;s/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=https\\:\\/\\/0xl18ug0.mirror.aliyuncs.com --live-restore/g&#39; /lib/systemd/system/docker.service\n</code></pre><h1 id=\"6、重启docker\"><a href=\"#6、重启docker\" class=\"headerlink\" title=\"6、重启docker\"></a>6、重启docker</h1><pre><code>systemctl daemon-reload\nsystemctl enable docker.service\nsystemctl restart docker.service\nps -ef |grep docker  #能看到docker启动以及2375端口\n</code></pre><p>#7、安装pip以及docker api</p>\n<pre><code>yum -y install epel-release\nyum -y install python-pip\npip install docker-py docker-compose\n</code></pre><h1 id=\"8、创建consul用户及组\"><a href=\"#8、创建consul用户及组\" class=\"headerlink\" title=\"8、创建consul用户及组\"></a>8、创建consul用户及组</h1><pre><code>groupadd -g 1005 consul\nuseradd -u 105 -g 1005 -s /bin/false consul\n</code></pre><h1 id=\"9、创建consul数据存储文件夹\"><a href=\"#9、创建consul数据存储文件夹\" class=\"headerlink\" title=\"9、创建consul数据存储文件夹\"></a>9、创建consul数据存储文件夹</h1><pre><code>mkdir -p /opt/consul/{data,conf}\nchown -R consul: /opt/consul\n</code></pre><h1 id=\"10、设置主机hosts，有多少台主机，就需要设置多少hosts\"><a href=\"#10、设置主机hosts，有多少台主机，就需要设置多少hosts\" class=\"headerlink\" title=\"10、设置主机hosts，有多少台主机，就需要设置多少hosts\"></a>10、设置主机hosts，有多少台主机，就需要设置多少hosts</h1><pre><code>vim /etc/hosts\n192.168.1.14    master.localhost.com\n192.168.1.15    slave1.localhost.com\n192.168.1.16    slave2.localhost.com\n</code></pre><h2 id=\"二、配置consul-cluster\"><a href=\"#二、配置consul-cluster\" class=\"headerlink\" title=\"二、配置consul cluster\"></a>二、配置consul cluster</h2><h1 id=\"1、拉取consul镜像\"><a href=\"#1、拉取consul镜像\" class=\"headerlink\" title=\"1、拉取consul镜像\"></a>1、拉取consul镜像</h1><pre><code>docker pull progrium/consul\n</code></pre><p>#提示：目录没有官方出consul镜像，以上consul镜像是官方推荐的第三方docker image</p>\n<h1 id=\"2、启动consul-server-192-168-1-14\"><a href=\"#2、启动consul-server-192-168-1-14\" class=\"headerlink\" title=\"2、启动consul server 192.168.1.14\"></a>2、启动consul server 192.168.1.14</h1><pre><code>docker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h $HOSTNAME \\\n--restart=always \\\n--name=consul-s1 \\\nprogrium/consul \\\n-server -bootstrap-expect=1 \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.14\n</code></pre><h1 id=\"3、启动consul-server-192-168-1-15\"><a href=\"#3、启动consul-server-192-168-1-15\" class=\"headerlink\" title=\"3、启动consul server 192.168.1.15\"></a>3、启动consul server 192.168.1.15</h1><pre><code>docker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-s2 \\\n--restart=always \\\n--name=consul-s2 \\\nprogrium/consul \\\n-server \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.15 -join 192.168.1.14\n</code></pre><h1 id=\"4、启动consul-client-192-168-1-16\"><a href=\"#4、启动consul-client-192-168-1-16\" class=\"headerlink\" title=\"4、启动consul client 192.168.1.16\"></a>4、启动consul client 192.168.1.16</h1><pre><code>docker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-c1 \\\n--restart=always \\\n--name=consul-c1 \\\nprogrium/consul \\\n-advertise 192.168.1.16 -join 192.168.1.14\n</code></pre><h2 id=\"三、registrator状态获取\"><a href=\"#三、registrator状态获取\" class=\"headerlink\" title=\"三、registrator状态获取\"></a>三、registrator状态获取</h2><p>依次启动</p>\n<pre><code>docker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.14 \\\nconsul://192.168.1.14:8500\n</code></pre><pre><code>docker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.15 \\\nconsul://192.168.1.15:8500\n</code></pre><pre><code>docker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.16 \\\nconsul://192.168.1.16:8500\n</code></pre><h2 id=\"四、安装shipyard、swarm\"><a href=\"#四、安装shipyard、swarm\" class=\"headerlink\" title=\"四、安装shipyard、swarm\"></a>四、安装shipyard、swarm</h2><p>1、192.168.1.14</p>\n<pre><code>docker run -tid \\\n-p 3375:3375 \\\n--restart=always \\\n--name shipyard-swarm-manager \\\nswarm:latest \\\nmanage --host tcp://0.0.0.0:3375 consul://192.168.1.14:8500\n</code></pre><pre><code>docker run -tid \\\n--restart=always \\\n--name=shipyard-rethinkdb \\\n-p 28015:28015 \\\n-p 29015:29015 \\\n-v /opt/rethinkdb:/data \\\nindex.tenxcloud.com/docker_library/rethinkdb\n</code></pre><pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-controller \\\n--link shipyard-rethinkdb:rethinkdb \\\n--link shipyard-swarm-manager:swarm \\\n-p 8080:8080 \\\ndockerclub/shipyard:latest \\\nserver \\\n-d tcp://swarm:3375\n</code></pre><pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.14:2375 consul://192.168.1.14:8500\n</code></pre><h1 id=\"2、安装swarm-agent\"><a href=\"#2、安装swarm-agent\" class=\"headerlink\" title=\"2、安装swarm-agent\"></a>2、安装swarm-agent</h1><p>主机192.168.1.15操作</p>\n<pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.15:2375 consul://192.168.1.14:8500\n</code></pre><p>主机192.168.1.16操作</p>\n<pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.16:2375 consul://192.168.1.14:8500\n</code></pre><h2 id=\"五、安装haproxy或者nginx（192-168-1-14）\"><a href=\"#五、安装haproxy或者nginx（192-168-1-14）\" class=\"headerlink\" title=\"五、安装haproxy或者nginx（192.168.1.14）\"></a>五、安装haproxy或者nginx（192.168.1.14）</h2><h1 id=\"1、安装haproxy\"><a href=\"#1、安装haproxy\" class=\"headerlink\" title=\"1、安装haproxy\"></a>1、安装haproxy</h1><pre><code>yum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\nopenssl openssl-devel make autoconf automake libtool bison libxml2 \\\nlibxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\ncmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\nlibjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\npcre-devel curl-devel libmcrypt libmcrypt-devel\n\ncd /tmp\nwget http://www.haproxy.org/download/1.7/src/haproxy-1.7.0.tar.gz\ntar -xvf /tmp/haproxy-1.7.0.tar.gz \nmake TARGET=linux31 PREFIX=/opt/haproxy\nmake install PREFIX=/opt/haproxy\n</code></pre><h1 id=\"2、配置haproxy-conf\"><a href=\"#2、配置haproxy-conf\" class=\"headerlink\" title=\"2、配置haproxy.conf\"></a>2、配置haproxy.conf</h1><pre><code>vim /opt/haproxy/conf/haproxy.conf\nglobal\n                log 127.0.0.1   local0\n                #log 127.0.0.1  local1 notice\n                #log loghost    local0 info\n                maxconn 50000\n                chroot /opt/haproxy\n                uid 99\n                gid 99\n\n                daemon\n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid\n                #debug\n                #quiet\n\n defaults\n                mode    tcp\n                option  dontlognull\n                option  forwardfor\n                option  redispatch\n                retries 2\n                balance static-rr\n                stats enable\n                stats uri /ha?stats  #haproxy运行状态查看 自定义uri\n                timeout connect     3000\n                timeout client      50000\n                timeout server 50000\n\nlisten admin_stat\n        # 监听端口\n        bind *:8888\n        # http的7层模式\n        mode http\n        #log global\n        # 统计页面自动刷新时间\n        stats refresh 30s\n        # 统计页面URL\n        stats uri /admin?stats\n        # 统计页面密码框上提示文本\n        stats realm Haproxy\\ Statistics\n        # 统计页面用户名和密码设置\n        stats auth admin:admin\n        # 隐藏统计页面上HAProxy的版本信息\n        #stats hide-version\n\nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        option httpchk\n        #maxconn 50000\n        #log 127.0.0.1 local0 debug\n</code></pre><h1 id=\"3、haproxy启动脚本-etc-init-d-haproxy\"><a href=\"#3、haproxy启动脚本-etc-init-d-haproxy\" class=\"headerlink\" title=\"3、haproxy启动脚本 /etc/init.d/haproxy\"></a>3、haproxy启动脚本 /etc/init.d/haproxy</h1><pre><code>#! /bin/bash\n# chkconfig: - 85 15\n# description: haproxy is a World Wide Web server. It is used to serve\nPROGDIR=/opt/haproxy\nPROGNAME=haproxy\nDAEMON=$PROGDIR/sbin/$PROGNAME\nCONFIG=$PROGDIR/conf/$PROGNAME.conf\nPIDFILE=$PROGDIR/run/$PROGNAME.pid\nDESC=&quot;HAProxy daemon&quot;\nSCRIPTNAME=/opt/haproxy/init.d/$PROGNAME\n# Gracefully exit if the package has been removed.\ntest -x $DAEMON || exit 0\nstart()\n {\n    echo -n &quot;Starting $DESC: $PROGNAME&quot;\n   $DAEMON -f $CONFIG\n   echo &quot;.&quot;\n        }\nstop()\n {  echo -n &quot;Stopping $DESC: $PROGNAME&quot;\n    cat $PIDFILE | xargs kill\n    echo &quot;.&quot;\n}\n\nreload()\n { echo -n &quot;reloading $DESC: $PROGNAME&quot;\n   $DAEMON -f $CONFIG -p $PIDFILE -sf $(cat $PIDFILE)\n}\ncase &quot;$1&quot; in\n  start)\n  start\n  ;;\n stop)\n  stop\n   ;;\n reload)\n reload\n   ;;\n*)\n echo &quot;Usage: $SCRIPTNAME {start|stop|reload}&quot; &gt;&amp;2\n exit 1\n ;;\nesac\nexit 0\n</code></pre><h1 id=\"4、启动haproxy-并加入到开启启动\"><a href=\"#4、启动haproxy-并加入到开启启动\" class=\"headerlink\" title=\"4、启动haproxy,并加入到开启启动\"></a>4、启动haproxy,并加入到开启启动</h1><pre><code>chmod +x /etc/init.d/haproxy\nchkconfig haproxy op\nservice haproxy start\n</code></pre><h1 id=\"5、安装nginx-并支持数字证书\"><a href=\"#5、安装nginx-并支持数字证书\" class=\"headerlink\" title=\"5、安装nginx 并支持数字证书\"></a>5、安装nginx 并支持数字证书</h1><pre><code>yum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\n openssl openssl-devel make autoconf automake libtool bison libxml2 \\\n libxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\n cmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\n libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\n pcre-devel curl-devel libmcrypt libmcrypt-devel\n</code></pre><h1 id=\"6、下载安装openssl\"><a href=\"#6、下载安装openssl\" class=\"headerlink\" title=\"6、下载安装openssl\"></a>6、下载安装openssl</h1><pre><code> cd /tmp\nwget https://www.openssl.org/source/openssl-1.1.0c.tar.gz\n tar -xvf openssl-1.1.0c.tar.gz\n cd /tmp/openssl-1.1.0c\n./config   --openssldir=/usr/local/ssl\nmake &amp;&amp; make install\n./config shared  --openssldir=/usr/local/ssl\nmake clean\nmake &amp;&amp; make install\n</code></pre><h1 id=\"7、下载安装-nginx\"><a href=\"#7、下载安装-nginx\" class=\"headerlink\" title=\"7、下载安装 nginx\"></a>7、下载安装 nginx</h1><pre><code>cd /tmp\nwget http://nginx.org/download/nginx-1.11.7.tar.gz\ngroupadd -r nginx\nuseradd -g nginx -r nginx -s /bin/false\ntar -xvf nginx-1.11.7.tar.gz\ncd /tmp/nginx-1.11.7\n./configure --prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n--user=nginx \\\n--group=nginx \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_random_index_module \\\n--with-http_secure_link_module \\\n--with-http_stub_status_module \\\n--with-http_auth_request_module \\\n--with-threads \\\n--with-stream \\\n--with-openssl=/tmp/openssl-1.1.0c \\\n--with-stream_ssl_module \\\n--with-http_slice_module \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-file-aio \\\n--with-http_v2_module \\\n--with-ipv6 \n\nmkdir -pv /var/cache/nginx/{client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp}\nmkdir -p /etc/nginx/conf.d\nmake &amp;&amp; make install\n</code></pre><h1 id=\"8、nginx配置文件\"><a href=\"#8、nginx配置文件\" class=\"headerlink\" title=\"8、nginx配置文件\"></a>8、nginx配置文件</h1><p>修改/etc/nginx/nginx.conf<br>user  nginx;<br>worker_processes  1;</p>\n<p>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;</p>\n<p>events {<br>    worker_connections  1024;<br>}</p>\n<p>http {<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;</p>\n<pre><code>log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\naccess_log  /var/log/nginx/access.log  main;\n\nsendfile        on;\ntcp_nopush     on;\n\nkeepalive_timeout  65;\ngzip  on;\ninclude /etc/nginx/conf.d/*.conf;\n</code></pre><p>}</p>\n<p>添加nginx默认web配置文件<br>/etc/nginx/conf.d/default.conf<br>server {<br>        listen       80;<br>        server_name  localhost;</p>\n<pre><code>    #charset koi8-r;\n\n    #access_log  logs/host.access.log  main;\n\n    location / {\n        root   /usr/local/nginx/html;\n        index  index.php index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    location ~ \\.php$ {\n        root           /usr/local/nginx/html;\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n    location ~* ^.+\\.(jpg|jpeg|gif|png|bmp)$ {\n        access_log  off;\n        root        opencart;\n        expires     30d;\n                    break;\n    }\n</code></pre><p>}</p>\n<h1 id=\"9、创建nginx启动脚本-etc-init-d-nginx\"><a href=\"#9、创建nginx启动脚本-etc-init-d-nginx\" class=\"headerlink\" title=\"9、创建nginx启动脚本 /etc/init.d/nginx\"></a>9、创建nginx启动脚本 /etc/init.d/nginx</h1><pre><code># chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\n\nEXEC=/usr/sbin/nginx\nPIDFILE=/var/run/nginx.pid\nCONF=&quot;/etc/nginx/nginx.conf&quot;\nAUTH=&quot;1234&quot;\n\ncase &quot;$1&quot; in\n        start)\n                if [ -f $PIDFILE ]\n                then\n                        echo &quot;$PIDFILE exists, process is already running or crashed.&quot;\n                else\n                        echo &quot;Starting nginx server...&quot;\n                        $EXEC &amp;\n                fi\n                if [ &quot;$?&quot;=&quot;0&quot; ]\n                then\n                        echo &quot;nginx is running...&quot;\n                fi\n                ;;\n        stop)\n                if [ ! -f $PIDFILE ]\n                then\n                        echo &quot;$PIDFILE exists, process is not running.&quot;\n                else\n                        PID=$(cat $PIDFILE)\n                        echo &quot;Stopping...&quot;\n                        kill -9 $PID\n                        PID=$(pidof nginx)\n                        kill -9 $PID\n                        rm -rf /var/run/nginx.pid\n                        sleep 2\n                       while [ -x $PIDFILE ]\n                       do\n                                echo &quot;Waiting for nginx to shutdown...&quot;\n                               sleep 1\n                        done\n                        echo &quot;nginx stopped&quot;\n                fi\n                ;;\n        restart|reload)\n                ${0} stop\n                ${0} start\n                ;;\n        *)\n               echo &quot;Usage: /etc/init.d/nginx {start|stop|restart|reload}&quot; &gt;&amp;2\n                exit 1\nesac\n</code></pre><h1 id=\"10、设置nginx开机启动\"><a href=\"#10、设置nginx开机启动\" class=\"headerlink\" title=\"10、设置nginx开机启动\"></a>10、设置nginx开机启动</h1><pre><code>chmod +x /etc/init.d/nginx\nchkconfig nginx on\nservice nginx start\n</code></pre><h2 id=\"六、安装consul-template-实现服务自动发现\"><a href=\"#六、安装consul-template-实现服务自动发现\" class=\"headerlink\" title=\"六、安装consul-template 实现服务自动发现\"></a>六、安装consul-template 实现服务自动发现</h2><h1 id=\"1、下载consul-template\"><a href=\"#1、下载consul-template\" class=\"headerlink\" title=\"1、下载consul-template\"></a>1、下载consul-template</h1><pre><code>cd /tmp\nwget https://releases.hashicorp.com/consul-template/0.16.0/consul-template_0.16.0_linux_amd64.zip\nyum -y install unzip\nunzip /tmp/consul-template_0.16.0_linux_amd64.zip -d /usr/bin/\n</code></pre><h1 id=\"2、consul-template-haproxy配置\"><a href=\"#2、consul-template-haproxy配置\" class=\"headerlink\" title=\"2、consul-template haproxy配置\"></a>2、consul-template haproxy配置</h1><pre><code>cat &gt; /opt/consul/conf/haproxy_ctmpl.json &lt;&lt; EOF\nconsul = &quot;127.0.0.1:8500&quot;\n\ntemplate {\n  source = &quot;/opt/haproxy/conf/haproxy.ctmpl&quot;\n  destination = &quot;/opt/haproxy/conf/haproxy.conf&quot;\n  command = &quot;/etc/init.d/haproxy reload&quot;\n}\nEOF\n\n3、haproxy.ctmpl配置 /opt/haproxy/conf/haproxy.ctmpl\nglobal  \n                log 127.0.0.1   local0  \n                #log 127.0.0.1  local1 notice  \n                #log loghost    local0 info  \n                maxconn 50000  \n                chroot /opt/haproxy\n                uid 99  \n                gid 99 \n\n                daemon  \n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid  \n                #debug  \n                #quiet  \n\n defaults  \n                mode    tcp  \n                option  dontlognull  \n                option  forwardfor  \n                option  redispatch  \n                retries 2  \n                balance static-rr\n                stats enable\n                stats uri /ha?stats \n                timeout connect     3000  \n                timeout client      50000  \n                timeout server 50000  \n\nlisten admin_stat  \n        bind *:8888    \n        mode http  \n        #log global   \n        stats refresh 30s  \n        stats uri /admin?stats  \n        stats realm Haproxy\\ Statistics \n        stats auth admin:admin \n        #stats hide-version  \n\nfrontend www\n         bind *:80\n         mode http\n         acl apache  hdr(HOST) apache.zone.com\n         acl nginx   hdr(HOST) nginx.zone.com\n         use_backend apache.qkazone.com if apache\n         use_backend nginx.qkazone.com if nginx\nbackend apache.zone.com\n        balance         roundrobin\n        mode            http\n{{range service \"apache-php-80\"}}\n        server  apache {{.Address}}:{{.Port}} check {{end}}\n\nbackend nginx.zone.com\n        mode http\n        balance         roundrobin\n{{range service \"nginx-80\"}}\n        server  nginx {{.Address}}:{{.Port}} check {{end}}\n\nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        #log 127.0.0.1 local0 debug\n        {{range service \"centos7\"}}\n        server  ssh {{.Address}}:{{.Port}} check {{end}}\n</code></pre><h1 id=\"4、配置consul-template-haproxy-启动脚本-etc-init-d-haproxy-ctmpl\"><a href=\"#4、配置consul-template-haproxy-启动脚本-etc-init-d-haproxy-ctmpl\" class=\"headerlink\" title=\"4、配置consul-template  haproxy 启动脚本 /etc/init.d/haproxy_ctmpl\"></a>4、配置consul-template  haproxy 启动脚本 /etc/init.d/haproxy_ctmpl</h1><pre><code>#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=&quot;/opt/consul/conf/haproxy_ctmpl.json&quot;\ncase &quot;$1&quot; in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n               if [ -n &quot;$PID&quot;   ]\n                   then\n                     echo &quot;haproxy_ctmpl is running...&quot;\n              else\n                echo &quot;Starting haproxy_ctmpl server...&quot;\n                        $EXEC -config $CONF &gt; /tmp/haproxy_ctmpl.out 2&gt;&amp;1 &amp;\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n            if [  -n &quot;$PID&quot; ]\n                 then\n                        echo &quot;Stopping...&quot;\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo &quot;haproxy_ctmpl exists, process is not running.&quot;\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo &quot;Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}&quot; &gt;&amp;2\n                exit 1\nesac\n</code></pre><h1 id=\"5、设置开机启动，启动\"><a href=\"#5、设置开机启动，启动\" class=\"headerlink\" title=\"5、设置开机启动，启动\"></a>5、设置开机启动，启动</h1><pre><code>chmod +x /etc/init.d/haproxy_ctmpl\nchkconfig haproxy_ctmpl on\nservice haproxy_ctmpl start\n</code></pre><h1 id=\"6、consul-template-nginx配置-opt-consul-conf-nginx-ctmpl-json\"><a href=\"#6、consul-template-nginx配置-opt-consul-conf-nginx-ctmpl-json\" class=\"headerlink\" title=\"6、consul-template  nginx配置 /opt/consul/conf/nginx_ctmpl.json\"></a>6、consul-template  nginx配置 /opt/consul/conf/nginx_ctmpl.json</h1><pre><code>cat &gt; /opt/consul/conf/nginx_ctmpl.json &lt;&lt; EOF\nconsul = &quot;127.0.0.1:8500&quot;\n\ntemplate {\n  source = &quot;/etc/nginx/conf.d/nginx_web.ctmpl&quot;\n  destination = &quot;/etc/nginx/conf.d/nginx_web.conf&quot;\n  command = &quot;/usr/sbin/nginx  -s reload&quot;\n}\nEOF\n</code></pre><h1 id=\"7、-etc-nginx-conf-d-nginx-web-ctmpl-配置\"><a href=\"#7、-etc-nginx-conf-d-nginx-web-ctmpl-配置\" class=\"headerlink\" title=\"7、/etc/nginx/conf.d/nginx_web.ctmpl 配置\"></a>7、/etc/nginx/conf.d/nginx_web.ctmpl 配置</h1><pre><code>upstream apache {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"apache-php-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name apache.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding &#39;&#39;;\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://apache/;\n    }\n}\nupstream nginx {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"nginx-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name nginx.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding &#39;&#39;;\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://nginx/;\n    }\n}\n</code></pre><h1 id=\"8、配置consul-template-nginx启动脚本-etc-init-d-nginx-ctmpl\"><a href=\"#8、配置consul-template-nginx启动脚本-etc-init-d-nginx-ctmpl\" class=\"headerlink\" title=\"8、配置consul-template  nginx启动脚本 /etc/init.d/nginx_ctmpl\"></a>8、配置consul-template  nginx启动脚本 /etc/init.d/nginx_ctmpl</h1><pre><code>#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=&quot;/opt/consul/conf/nginx_ctmpl.json&quot;\ncase &quot;$1&quot; in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n               if [ -n &quot;$PID&quot;   ]\n                   then\n                     echo &quot;haproxy_ctmpl is running...&quot;\n              else\n                echo &quot;Starting haproxy_ctmpl server...&quot;\n                        $EXEC -config $CONF &gt; /tmp/nginx_ctmpl.out 2&gt;&amp;1 &amp;\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n            if [  -n &quot;$PID&quot; ]\n                 then\n                        echo &quot;Stopping...&quot;\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo &quot;haproxy_ctmpl exists, process is not running.&quot;\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo &quot;Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}&quot; &gt;&amp;2\n                exit 1\nesac\n</code></pre><h1 id=\"9、设置开机启动\"><a href=\"#9、设置开机启动\" class=\"headerlink\" title=\"9、设置开机启动\"></a>9、设置开机启动</h1><pre><code>chmod +x /etc/init.d/nginx_ctmpl\nchkconfig nginx_ctmpl on\nservice nginx_ctmpl start\n</code></pre><h2 id=\"七、测试是否自动发现\"><a href=\"#七、测试是否自动发现\" class=\"headerlink\" title=\"七、测试是否自动发现\"></a>七、测试是否自动发现</h2><pre><code>docker run -ti -d -p :80 eboraas/apache-php \ndocker run -d -ti -p :80 nginx\n</code></pre><p>1、consul web<br><a href=\"http://192.168.1.66:8500/ui/#/dc1/services\" target=\"_blank\" rel=\"noopener\">http://192.168.1.66:8500/ui/#/dc1/services</a></p>\n<p>2、shipyard web<br><a href=\"http://192.168.1.23:8080\" target=\"_blank\" rel=\"noopener\">http://192.168.1.23:8080</a><br>账号admin密码 shipyard</p>\n<p>3、haproxy web<br><a href=\"http://192.168.1.14:8888/admin?stats\" target=\"_blank\" rel=\"noopener\">http://192.168.1.14:8888/admin?stats</a><br>账号：admin 密码admin<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"<p>前言<br>Swarm项目是Docker公司发布三剑客中的一员，用来提供容器集群服务，目的是更好的帮助用户管理多个Docker Engine，方便用户使用，像使用Docker Engine一样使用容器集群服务。这次分享内容从Swarm项目现状、Swarm社区现状和Swarm未来的一些规划三方面介绍Swarm，目的是能让大家对Swarm有个完整的认识，并且希望更多的人采用到Swarm项目中来。<br>此文主要是swarm docker集群部署，仅供参考<br>","more":"</p>\n<p>环境：centos7.2<br>192.168.1.14 master swarm-manager rethinkdb controller swarm-agent consul-s1 registrator consul-template(nginx)<br>192.168.1.15 slave-1 registrator swarm-agent consul-s2<br>192.168.1.16 slave-2 registrator swarm-agent consul-s3<br>docker-engine    17.05.0-ce</p>\n<h2 id=\"一、搭建docker集群环境\"><a href=\"#一、搭建docker集群环境\" class=\"headerlink\" title=\"一、搭建docker集群环境\"></a>一、搭建docker集群环境</h2><h1 id=\"1、先检查是否安装旧版本docker\"><a href=\"#1、先检查是否安装旧版本docker\" class=\"headerlink\" title=\"1、先检查是否安装旧版本docker\"></a>1、先检查是否安装旧版本docker</h1><pre><code>rpm -qa|grep docker\n</code></pre><p>如果有就先卸载</p>\n<pre><code>yum remove docker*\n</code></pre><h1 id=\"2、添加docker-repo安装源，写入文件\"><a href=\"#2、添加docker-repo安装源，写入文件\" class=\"headerlink\" title=\"2、添加docker.repo安装源，写入文件\"></a>2、添加docker.repo安装源，写入文件</h1><pre><code>tee /etc/yum.repos.d/docker.repo&lt;&lt;EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n</code></pre><h1 id=\"3、安装docker\"><a href=\"#3、安装docker\" class=\"headerlink\" title=\"3、安装docker\"></a>3、安装docker</h1><pre><code>yum install docker-engine\n</code></pre><h1 id=\"4、配置防火墙\"><a href=\"#4、配置防火墙\" class=\"headerlink\" title=\"4、配置防火墙\"></a>4、配置防火墙</h1><pre><code>firewall-cmd --permanent --add-port={2375/tcp,3375/tcp,8500/tcp,8300/tcp,8301/tcp,8301/udp,8302/tcp,8302/udp,8400/tcp,8500/tcp,8600/tcp,8600/udp,8080/tcp,28015/tcp,29015/tcp}\nfirewall-cmd --reload\nfirewall-cmd --list-all\n</code></pre><h1 id=\"iptables内容（使用的iptables）\"><a href=\"#iptables内容（使用的iptables）\" class=\"headerlink\" title=\"iptables内容（使用的iptables）\"></a>iptables内容（使用的iptables）</h1><pre><code>*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 192.168.0.0/16 ! -o docker0 -j MASQUERADE\nCOMMIT\n#\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:DOCKER - [0:0]\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p icmp -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 2375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3375 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8300 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8301 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8301 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8302 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8302 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8400 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8500 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8600 -j ACCEPT\n-A INPUT -p udp -m state --state NEW -m udp --dport 8600 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 28015 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 29015 -j ACCEPT\n#-A INPUT -j REJECT --reject-with icmp-host-prohibited\n#-A FORWARD -j REJECT --reject-with icmp-host-prohibited\nCOMMIT\n</code></pre><h1 id=\"5、增加tcp监听端口-并配置docker加速\"><a href=\"#5、增加tcp监听端口-并配置docker加速\" class=\"headerlink\" title=\"5、增加tcp监听端口,并配置docker加速\"></a>5、增加tcp监听端口,并配置docker加速</h1><p>修改/lib/systemd/system/docker.service<br>daocloud加速</p>\n<pre><code>sed -i &#39;s/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --live-restore/g&#39; /lib/systemd/system/docker.service\n</code></pre><p>私库</p>\n<pre><code>sed -i &#39;s/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=http\\:\\/\\/a582cc4e.m.daocloud.io --insecure-registry 192.168.1.14\\:5000 --live-restore/g&#39; /lib/systemd/system/docker.service\n</code></pre><p>阿里云加速</p>\n<pre><code>sed -i &#39;s/ExecStart=.*/ExecStart=\\/usr\\/bin\\/dockerd -H unix\\:\\/\\/\\/var\\/run\\/docker.sock -D -H tcp\\:\\/\\/0.0.0.0\\:2375 --registry-mirror=https\\:\\/\\/0xl18ug0.mirror.aliyuncs.com --live-restore/g&#39; /lib/systemd/system/docker.service\n</code></pre><h1 id=\"6、重启docker\"><a href=\"#6、重启docker\" class=\"headerlink\" title=\"6、重启docker\"></a>6、重启docker</h1><pre><code>systemctl daemon-reload\nsystemctl enable docker.service\nsystemctl restart docker.service\nps -ef |grep docker  #能看到docker启动以及2375端口\n</code></pre><p>#7、安装pip以及docker api</p>\n<pre><code>yum -y install epel-release\nyum -y install python-pip\npip install docker-py docker-compose\n</code></pre><h1 id=\"8、创建consul用户及组\"><a href=\"#8、创建consul用户及组\" class=\"headerlink\" title=\"8、创建consul用户及组\"></a>8、创建consul用户及组</h1><pre><code>groupadd -g 1005 consul\nuseradd -u 105 -g 1005 -s /bin/false consul\n</code></pre><h1 id=\"9、创建consul数据存储文件夹\"><a href=\"#9、创建consul数据存储文件夹\" class=\"headerlink\" title=\"9、创建consul数据存储文件夹\"></a>9、创建consul数据存储文件夹</h1><pre><code>mkdir -p /opt/consul/{data,conf}\nchown -R consul: /opt/consul\n</code></pre><h1 id=\"10、设置主机hosts，有多少台主机，就需要设置多少hosts\"><a href=\"#10、设置主机hosts，有多少台主机，就需要设置多少hosts\" class=\"headerlink\" title=\"10、设置主机hosts，有多少台主机，就需要设置多少hosts\"></a>10、设置主机hosts，有多少台主机，就需要设置多少hosts</h1><pre><code>vim /etc/hosts\n192.168.1.14    master.localhost.com\n192.168.1.15    slave1.localhost.com\n192.168.1.16    slave2.localhost.com\n</code></pre><h2 id=\"二、配置consul-cluster\"><a href=\"#二、配置consul-cluster\" class=\"headerlink\" title=\"二、配置consul cluster\"></a>二、配置consul cluster</h2><h1 id=\"1、拉取consul镜像\"><a href=\"#1、拉取consul镜像\" class=\"headerlink\" title=\"1、拉取consul镜像\"></a>1、拉取consul镜像</h1><pre><code>docker pull progrium/consul\n</code></pre><p>#提示：目录没有官方出consul镜像，以上consul镜像是官方推荐的第三方docker image</p>\n<h1 id=\"2、启动consul-server-192-168-1-14\"><a href=\"#2、启动consul-server-192-168-1-14\" class=\"headerlink\" title=\"2、启动consul server 192.168.1.14\"></a>2、启动consul server 192.168.1.14</h1><pre><code>docker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h $HOSTNAME \\\n--restart=always \\\n--name=consul-s1 \\\nprogrium/consul \\\n-server -bootstrap-expect=1 \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.14\n</code></pre><h1 id=\"3、启动consul-server-192-168-1-15\"><a href=\"#3、启动consul-server-192-168-1-15\" class=\"headerlink\" title=\"3、启动consul server 192.168.1.15\"></a>3、启动consul server 192.168.1.15</h1><pre><code>docker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-s2 \\\n--restart=always \\\n--name=consul-s2 \\\nprogrium/consul \\\n-server \\\n-ui-dir=/ui \\\n-client 0.0.0.0 \\\n-advertise 192.168.1.15 -join 192.168.1.14\n</code></pre><h1 id=\"4、启动consul-client-192-168-1-16\"><a href=\"#4、启动consul-client-192-168-1-16\" class=\"headerlink\" title=\"4、启动consul client 192.168.1.16\"></a>4、启动consul client 192.168.1.16</h1><pre><code>docker run -d \\\n-p 8300:8300 \\\n-p 8301:8301 \\\n-p 8301:8301/udp \\\n-p 8302:8302 \\\n-p 8302:8302/udp \\\n-p 8400:8400 \\\n-p 8500:8500 \\\n-p 8600:53 \\\n-p 8600:53/udp \\\n-v /opt/consul/data:/data \\\n-h consul-c1 \\\n--restart=always \\\n--name=consul-c1 \\\nprogrium/consul \\\n-advertise 192.168.1.16 -join 192.168.1.14\n</code></pre><h2 id=\"三、registrator状态获取\"><a href=\"#三、registrator状态获取\" class=\"headerlink\" title=\"三、registrator状态获取\"></a>三、registrator状态获取</h2><p>依次启动</p>\n<pre><code>docker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.14 \\\nconsul://192.168.1.14:8500\n</code></pre><pre><code>docker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.15 \\\nconsul://192.168.1.15:8500\n</code></pre><pre><code>docker run -d \\\n--restart=always \\\n--name=registrator \\\n--net=host \\\n-v /var/run/docker.sock:/tmp/docker.sock \\\ngliderlabs/registrator \\\n-ip 192.168.1.16 \\\nconsul://192.168.1.16:8500\n</code></pre><h2 id=\"四、安装shipyard、swarm\"><a href=\"#四、安装shipyard、swarm\" class=\"headerlink\" title=\"四、安装shipyard、swarm\"></a>四、安装shipyard、swarm</h2><p>1、192.168.1.14</p>\n<pre><code>docker run -tid \\\n-p 3375:3375 \\\n--restart=always \\\n--name shipyard-swarm-manager \\\nswarm:latest \\\nmanage --host tcp://0.0.0.0:3375 consul://192.168.1.14:8500\n</code></pre><pre><code>docker run -tid \\\n--restart=always \\\n--name=shipyard-rethinkdb \\\n-p 28015:28015 \\\n-p 29015:29015 \\\n-v /opt/rethinkdb:/data \\\nindex.tenxcloud.com/docker_library/rethinkdb\n</code></pre><pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-controller \\\n--link shipyard-rethinkdb:rethinkdb \\\n--link shipyard-swarm-manager:swarm \\\n-p 8080:8080 \\\ndockerclub/shipyard:latest \\\nserver \\\n-d tcp://swarm:3375\n</code></pre><pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.14:2375 consul://192.168.1.14:8500\n</code></pre><h1 id=\"2、安装swarm-agent\"><a href=\"#2、安装swarm-agent\" class=\"headerlink\" title=\"2、安装swarm-agent\"></a>2、安装swarm-agent</h1><p>主机192.168.1.15操作</p>\n<pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.15:2375 consul://192.168.1.14:8500\n</code></pre><p>主机192.168.1.16操作</p>\n<pre><code>docker run -tid \\\n--restart=always \\\n--name shipyard-swarm-agent \\\nswarm:latest \\\njoin --addr 192.168.1.16:2375 consul://192.168.1.14:8500\n</code></pre><h2 id=\"五、安装haproxy或者nginx（192-168-1-14）\"><a href=\"#五、安装haproxy或者nginx（192-168-1-14）\" class=\"headerlink\" title=\"五、安装haproxy或者nginx（192.168.1.14）\"></a>五、安装haproxy或者nginx（192.168.1.14）</h2><h1 id=\"1、安装haproxy\"><a href=\"#1、安装haproxy\" class=\"headerlink\" title=\"1、安装haproxy\"></a>1、安装haproxy</h1><pre><code>yum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\nopenssl openssl-devel make autoconf automake libtool bison libxml2 \\\nlibxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\ncmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\nlibjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\npcre-devel curl-devel libmcrypt libmcrypt-devel\n\ncd /tmp\nwget http://www.haproxy.org/download/1.7/src/haproxy-1.7.0.tar.gz\ntar -xvf /tmp/haproxy-1.7.0.tar.gz \nmake TARGET=linux31 PREFIX=/opt/haproxy\nmake install PREFIX=/opt/haproxy\n</code></pre><h1 id=\"2、配置haproxy-conf\"><a href=\"#2、配置haproxy-conf\" class=\"headerlink\" title=\"2、配置haproxy.conf\"></a>2、配置haproxy.conf</h1><pre><code>vim /opt/haproxy/conf/haproxy.conf\nglobal\n                log 127.0.0.1   local0\n                #log 127.0.0.1  local1 notice\n                #log loghost    local0 info\n                maxconn 50000\n                chroot /opt/haproxy\n                uid 99\n                gid 99\n\n                daemon\n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid\n                #debug\n                #quiet\n\n defaults\n                mode    tcp\n                option  dontlognull\n                option  forwardfor\n                option  redispatch\n                retries 2\n                balance static-rr\n                stats enable\n                stats uri /ha?stats  #haproxy运行状态查看 自定义uri\n                timeout connect     3000\n                timeout client      50000\n                timeout server 50000\n\nlisten admin_stat\n        # 监听端口\n        bind *:8888\n        # http的7层模式\n        mode http\n        #log global\n        # 统计页面自动刷新时间\n        stats refresh 30s\n        # 统计页面URL\n        stats uri /admin?stats\n        # 统计页面密码框上提示文本\n        stats realm Haproxy\\ Statistics\n        # 统计页面用户名和密码设置\n        stats auth admin:admin\n        # 隐藏统计页面上HAProxy的版本信息\n        #stats hide-version\n\nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        option httpchk\n        #maxconn 50000\n        #log 127.0.0.1 local0 debug\n</code></pre><h1 id=\"3、haproxy启动脚本-etc-init-d-haproxy\"><a href=\"#3、haproxy启动脚本-etc-init-d-haproxy\" class=\"headerlink\" title=\"3、haproxy启动脚本 /etc/init.d/haproxy\"></a>3、haproxy启动脚本 /etc/init.d/haproxy</h1><pre><code>#! /bin/bash\n# chkconfig: - 85 15\n# description: haproxy is a World Wide Web server. It is used to serve\nPROGDIR=/opt/haproxy\nPROGNAME=haproxy\nDAEMON=$PROGDIR/sbin/$PROGNAME\nCONFIG=$PROGDIR/conf/$PROGNAME.conf\nPIDFILE=$PROGDIR/run/$PROGNAME.pid\nDESC=&quot;HAProxy daemon&quot;\nSCRIPTNAME=/opt/haproxy/init.d/$PROGNAME\n# Gracefully exit if the package has been removed.\ntest -x $DAEMON || exit 0\nstart()\n {\n    echo -n &quot;Starting $DESC: $PROGNAME&quot;\n   $DAEMON -f $CONFIG\n   echo &quot;.&quot;\n        }\nstop()\n {  echo -n &quot;Stopping $DESC: $PROGNAME&quot;\n    cat $PIDFILE | xargs kill\n    echo &quot;.&quot;\n}\n\nreload()\n { echo -n &quot;reloading $DESC: $PROGNAME&quot;\n   $DAEMON -f $CONFIG -p $PIDFILE -sf $(cat $PIDFILE)\n}\ncase &quot;$1&quot; in\n  start)\n  start\n  ;;\n stop)\n  stop\n   ;;\n reload)\n reload\n   ;;\n*)\n echo &quot;Usage: $SCRIPTNAME {start|stop|reload}&quot; &gt;&amp;2\n exit 1\n ;;\nesac\nexit 0\n</code></pre><h1 id=\"4、启动haproxy-并加入到开启启动\"><a href=\"#4、启动haproxy-并加入到开启启动\" class=\"headerlink\" title=\"4、启动haproxy,并加入到开启启动\"></a>4、启动haproxy,并加入到开启启动</h1><pre><code>chmod +x /etc/init.d/haproxy\nchkconfig haproxy op\nservice haproxy start\n</code></pre><h1 id=\"5、安装nginx-并支持数字证书\"><a href=\"#5、安装nginx-并支持数字证书\" class=\"headerlink\" title=\"5、安装nginx 并支持数字证书\"></a>5、安装nginx 并支持数字证书</h1><pre><code>yum -y install git patch gcc gcc-c++  readline-devel zlib-devel libffi-devel \\\n openssl openssl-devel make autoconf automake libtool bison libxml2 \\\n libxml2-devel libxslt-devel libyaml-devel  python  python-docutils \\\n cmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \\\n libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel  \\\n pcre-devel curl-devel libmcrypt libmcrypt-devel\n</code></pre><h1 id=\"6、下载安装openssl\"><a href=\"#6、下载安装openssl\" class=\"headerlink\" title=\"6、下载安装openssl\"></a>6、下载安装openssl</h1><pre><code> cd /tmp\nwget https://www.openssl.org/source/openssl-1.1.0c.tar.gz\n tar -xvf openssl-1.1.0c.tar.gz\n cd /tmp/openssl-1.1.0c\n./config   --openssldir=/usr/local/ssl\nmake &amp;&amp; make install\n./config shared  --openssldir=/usr/local/ssl\nmake clean\nmake &amp;&amp; make install\n</code></pre><h1 id=\"7、下载安装-nginx\"><a href=\"#7、下载安装-nginx\" class=\"headerlink\" title=\"7、下载安装 nginx\"></a>7、下载安装 nginx</h1><pre><code>cd /tmp\nwget http://nginx.org/download/nginx-1.11.7.tar.gz\ngroupadd -r nginx\nuseradd -g nginx -r nginx -s /bin/false\ntar -xvf nginx-1.11.7.tar.gz\ncd /tmp/nginx-1.11.7\n./configure --prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/cache/nginx/client_temp \\\n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n--user=nginx \\\n--group=nginx \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_random_index_module \\\n--with-http_secure_link_module \\\n--with-http_stub_status_module \\\n--with-http_auth_request_module \\\n--with-threads \\\n--with-stream \\\n--with-openssl=/tmp/openssl-1.1.0c \\\n--with-stream_ssl_module \\\n--with-http_slice_module \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-file-aio \\\n--with-http_v2_module \\\n--with-ipv6 \n\nmkdir -pv /var/cache/nginx/{client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp}\nmkdir -p /etc/nginx/conf.d\nmake &amp;&amp; make install\n</code></pre><h1 id=\"8、nginx配置文件\"><a href=\"#8、nginx配置文件\" class=\"headerlink\" title=\"8、nginx配置文件\"></a>8、nginx配置文件</h1><p>修改/etc/nginx/nginx.conf<br>user  nginx;<br>worker_processes  1;</p>\n<p>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;</p>\n<p>events {<br>    worker_connections  1024;<br>}</p>\n<p>http {<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;</p>\n<pre><code>log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\naccess_log  /var/log/nginx/access.log  main;\n\nsendfile        on;\ntcp_nopush     on;\n\nkeepalive_timeout  65;\ngzip  on;\ninclude /etc/nginx/conf.d/*.conf;\n</code></pre><p>}</p>\n<p>添加nginx默认web配置文件<br>/etc/nginx/conf.d/default.conf<br>server {<br>        listen       80;<br>        server_name  localhost;</p>\n<pre><code>    #charset koi8-r;\n\n    #access_log  logs/host.access.log  main;\n\n    location / {\n        root   /usr/local/nginx/html;\n        index  index.php index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n\n    # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n    #\n    #location ~ \\.php$ {\n    #    proxy_pass   http://127.0.0.1;\n    #}\n\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    #\n    location ~ \\.php$ {\n        root           /usr/local/nginx/html;\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n    location ~* ^.+\\.(jpg|jpeg|gif|png|bmp)$ {\n        access_log  off;\n        root        opencart;\n        expires     30d;\n                    break;\n    }\n</code></pre><p>}</p>\n<h1 id=\"9、创建nginx启动脚本-etc-init-d-nginx\"><a href=\"#9、创建nginx启动脚本-etc-init-d-nginx\" class=\"headerlink\" title=\"9、创建nginx启动脚本 /etc/init.d/nginx\"></a>9、创建nginx启动脚本 /etc/init.d/nginx</h1><pre><code># chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\n\nEXEC=/usr/sbin/nginx\nPIDFILE=/var/run/nginx.pid\nCONF=&quot;/etc/nginx/nginx.conf&quot;\nAUTH=&quot;1234&quot;\n\ncase &quot;$1&quot; in\n        start)\n                if [ -f $PIDFILE ]\n                then\n                        echo &quot;$PIDFILE exists, process is already running or crashed.&quot;\n                else\n                        echo &quot;Starting nginx server...&quot;\n                        $EXEC &amp;\n                fi\n                if [ &quot;$?&quot;=&quot;0&quot; ]\n                then\n                        echo &quot;nginx is running...&quot;\n                fi\n                ;;\n        stop)\n                if [ ! -f $PIDFILE ]\n                then\n                        echo &quot;$PIDFILE exists, process is not running.&quot;\n                else\n                        PID=$(cat $PIDFILE)\n                        echo &quot;Stopping...&quot;\n                        kill -9 $PID\n                        PID=$(pidof nginx)\n                        kill -9 $PID\n                        rm -rf /var/run/nginx.pid\n                        sleep 2\n                       while [ -x $PIDFILE ]\n                       do\n                                echo &quot;Waiting for nginx to shutdown...&quot;\n                               sleep 1\n                        done\n                        echo &quot;nginx stopped&quot;\n                fi\n                ;;\n        restart|reload)\n                ${0} stop\n                ${0} start\n                ;;\n        *)\n               echo &quot;Usage: /etc/init.d/nginx {start|stop|restart|reload}&quot; &gt;&amp;2\n                exit 1\nesac\n</code></pre><h1 id=\"10、设置nginx开机启动\"><a href=\"#10、设置nginx开机启动\" class=\"headerlink\" title=\"10、设置nginx开机启动\"></a>10、设置nginx开机启动</h1><pre><code>chmod +x /etc/init.d/nginx\nchkconfig nginx on\nservice nginx start\n</code></pre><h2 id=\"六、安装consul-template-实现服务自动发现\"><a href=\"#六、安装consul-template-实现服务自动发现\" class=\"headerlink\" title=\"六、安装consul-template 实现服务自动发现\"></a>六、安装consul-template 实现服务自动发现</h2><h1 id=\"1、下载consul-template\"><a href=\"#1、下载consul-template\" class=\"headerlink\" title=\"1、下载consul-template\"></a>1、下载consul-template</h1><pre><code>cd /tmp\nwget https://releases.hashicorp.com/consul-template/0.16.0/consul-template_0.16.0_linux_amd64.zip\nyum -y install unzip\nunzip /tmp/consul-template_0.16.0_linux_amd64.zip -d /usr/bin/\n</code></pre><h1 id=\"2、consul-template-haproxy配置\"><a href=\"#2、consul-template-haproxy配置\" class=\"headerlink\" title=\"2、consul-template haproxy配置\"></a>2、consul-template haproxy配置</h1><pre><code>cat &gt; /opt/consul/conf/haproxy_ctmpl.json &lt;&lt; EOF\nconsul = &quot;127.0.0.1:8500&quot;\n\ntemplate {\n  source = &quot;/opt/haproxy/conf/haproxy.ctmpl&quot;\n  destination = &quot;/opt/haproxy/conf/haproxy.conf&quot;\n  command = &quot;/etc/init.d/haproxy reload&quot;\n}\nEOF\n\n3、haproxy.ctmpl配置 /opt/haproxy/conf/haproxy.ctmpl\nglobal  \n                log 127.0.0.1   local0  \n                #log 127.0.0.1  local1 notice  \n                #log loghost    local0 info  \n                maxconn 50000  \n                chroot /opt/haproxy\n                uid 99  \n                gid 99 \n\n                daemon  \n                nbproc 2\n                pidfile /opt/haproxy/run/haproxy.pid  \n                #debug  \n                #quiet  \n\n defaults  \n                mode    tcp  \n                option  dontlognull  \n                option  forwardfor  \n                option  redispatch  \n                retries 2  \n                balance static-rr\n                stats enable\n                stats uri /ha?stats \n                timeout connect     3000  \n                timeout client      50000  \n                timeout server 50000  \n\nlisten admin_stat  \n        bind *:8888    \n        mode http  \n        #log global   \n        stats refresh 30s  \n        stats uri /admin?stats  \n        stats realm Haproxy\\ Statistics \n        stats auth admin:admin \n        #stats hide-version  \n\nfrontend www\n         bind *:80\n         mode http\n         acl apache  hdr(HOST) apache.zone.com\n         acl nginx   hdr(HOST) nginx.zone.com\n         use_backend apache.qkazone.com if apache\n         use_backend nginx.qkazone.com if nginx\nbackend apache.zone.com\n        balance         roundrobin\n        mode            http\n{{range service \"apache-php-80\"}}\n        server  apache {{.Address}}:{{.Port}} check {{end}}\n\nbackend nginx.zone.com\n        mode http\n        balance         roundrobin\n{{range service \"nginx-80\"}}\n        server  nginx {{.Address}}:{{.Port}} check {{end}}\n\nlisten login\n        bind *:9999\n        mode tcp\n        balance roundrobin\n        #log 127.0.0.1 local0 debug\n        {{range service \"centos7\"}}\n        server  ssh {{.Address}}:{{.Port}} check {{end}}\n</code></pre><h1 id=\"4、配置consul-template-haproxy-启动脚本-etc-init-d-haproxy-ctmpl\"><a href=\"#4、配置consul-template-haproxy-启动脚本-etc-init-d-haproxy-ctmpl\" class=\"headerlink\" title=\"4、配置consul-template  haproxy 启动脚本 /etc/init.d/haproxy_ctmpl\"></a>4、配置consul-template  haproxy 启动脚本 /etc/init.d/haproxy_ctmpl</h1><pre><code>#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=&quot;/opt/consul/conf/haproxy_ctmpl.json&quot;\ncase &quot;$1&quot; in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n               if [ -n &quot;$PID&quot;   ]\n                   then\n                     echo &quot;haproxy_ctmpl is running...&quot;\n              else\n                echo &quot;Starting haproxy_ctmpl server...&quot;\n                        $EXEC -config $CONF &gt; /tmp/haproxy_ctmpl.out 2&gt;&amp;1 &amp;\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n            if [  -n &quot;$PID&quot; ]\n                 then\n                        echo &quot;Stopping...&quot;\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo &quot;haproxy_ctmpl exists, process is not running.&quot;\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo &quot;Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}&quot; &gt;&amp;2\n                exit 1\nesac\n</code></pre><h1 id=\"5、设置开机启动，启动\"><a href=\"#5、设置开机启动，启动\" class=\"headerlink\" title=\"5、设置开机启动，启动\"></a>5、设置开机启动，启动</h1><pre><code>chmod +x /etc/init.d/haproxy_ctmpl\nchkconfig haproxy_ctmpl on\nservice haproxy_ctmpl start\n</code></pre><h1 id=\"6、consul-template-nginx配置-opt-consul-conf-nginx-ctmpl-json\"><a href=\"#6、consul-template-nginx配置-opt-consul-conf-nginx-ctmpl-json\" class=\"headerlink\" title=\"6、consul-template  nginx配置 /opt/consul/conf/nginx_ctmpl.json\"></a>6、consul-template  nginx配置 /opt/consul/conf/nginx_ctmpl.json</h1><pre><code>cat &gt; /opt/consul/conf/nginx_ctmpl.json &lt;&lt; EOF\nconsul = &quot;127.0.0.1:8500&quot;\n\ntemplate {\n  source = &quot;/etc/nginx/conf.d/nginx_web.ctmpl&quot;\n  destination = &quot;/etc/nginx/conf.d/nginx_web.conf&quot;\n  command = &quot;/usr/sbin/nginx  -s reload&quot;\n}\nEOF\n</code></pre><h1 id=\"7、-etc-nginx-conf-d-nginx-web-ctmpl-配置\"><a href=\"#7、-etc-nginx-conf-d-nginx-web-ctmpl-配置\" class=\"headerlink\" title=\"7、/etc/nginx/conf.d/nginx_web.ctmpl 配置\"></a>7、/etc/nginx/conf.d/nginx_web.ctmpl 配置</h1><pre><code>upstream apache {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"apache-php-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name apache.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding &#39;&#39;;\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://apache/;\n    }\n}\nupstream nginx {\n    ip_hash;\n    # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream\n    # least_conn;\n    # least_time;\n{{range service \"nginx-80\"}}\n    server {{.Address}}:{{.Port}} fail_timeout=0;\n{{end}}\n    keepalive 64;\n}\nserver {\n    listen 80;\n    server_name nginx.zone.com;\n    location / {\n        client_max_body_size    0;\n        proxy_connect_timeout 300s;\n        proxy_send_timeout   900;\n        proxy_read_timeout   900;\n        proxy_buffer_size    32k;\n        proxy_buffers      4 32k;\n        proxy_busy_buffers_size 64k;\n        proxy_redirect     off;\n        proxy_hide_header  Vary;\n        proxy_set_header   Accept-Encoding &#39;&#39;;\n        proxy_set_header   Host   $host;\n        proxy_set_header   Referer $http_referer;\n        proxy_set_header   Cookie $http_cookie;\n        proxy_set_header   X-Real-IP  $remote_addr;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header   Host $host;\n        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_headers_hash_max_size 51200;\n        proxy_headers_hash_bucket_size 6400;\n        proxy_pass          http://nginx/;\n    }\n}\n</code></pre><h1 id=\"8、配置consul-template-nginx启动脚本-etc-init-d-nginx-ctmpl\"><a href=\"#8、配置consul-template-nginx启动脚本-etc-init-d-nginx-ctmpl\" class=\"headerlink\" title=\"8、配置consul-template  nginx启动脚本 /etc/init.d/nginx_ctmpl\"></a>8、配置consul-template  nginx启动脚本 /etc/init.d/nginx_ctmpl</h1><pre><code>#!/bin/bash\n# chkconfig: 2345 10 90\n# description: Start and Stop redis\n\nPATH=/usr/local/bin:/sbin:/usr/bin:/bin\nEXEC=/usr/bin/consul-template\nCONF=&quot;/opt/consul/conf/nginx_ctmpl.json&quot;\ncase &quot;$1&quot; in\n        start)\n                 PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n               if [ -n &quot;$PID&quot;   ]\n                   then\n                     echo &quot;haproxy_ctmpl is running...&quot;\n              else\n                echo &quot;Starting haproxy_ctmpl server...&quot;\n                        $EXEC -config $CONF &gt; /tmp/nginx_ctmpl.out 2&gt;&amp;1 &amp;\n             fi\n             ;;\n       stop)\n            PID=$(ps -ef | grep -v grep  | grep &quot;$EXEC -config $CONF&quot; | awk &#39;{print $2}&#39;)\n            if [  -n &quot;$PID&quot; ]\n                 then\n                        echo &quot;Stopping...&quot;\n                        kill -9 $PID\n                        sleep 2\n               else\n               echo &quot;haproxy_ctmpl exists, process is not running.&quot;\n             fi\n             ;;\n       restart|force-reload)\n                ${0} stop\n                ${0} start\n                ;;\n*)\n               echo &quot;Usage: /etc/init.d/tmpl {start|stop|restart|force-reload}&quot; &gt;&amp;2\n                exit 1\nesac\n</code></pre><h1 id=\"9、设置开机启动\"><a href=\"#9、设置开机启动\" class=\"headerlink\" title=\"9、设置开机启动\"></a>9、设置开机启动</h1><pre><code>chmod +x /etc/init.d/nginx_ctmpl\nchkconfig nginx_ctmpl on\nservice nginx_ctmpl start\n</code></pre><h2 id=\"七、测试是否自动发现\"><a href=\"#七、测试是否自动发现\" class=\"headerlink\" title=\"七、测试是否自动发现\"></a>七、测试是否自动发现</h2><pre><code>docker run -ti -d -p :80 eboraas/apache-php \ndocker run -d -ti -p :80 nginx\n</code></pre><p>1、consul web<br><a href=\"http://192.168.1.66:8500/ui/#/dc1/services\" target=\"_blank\" rel=\"noopener\">http://192.168.1.66:8500/ui/#/dc1/services</a></p>\n<p>2、shipyard web<br><a href=\"http://192.168.1.23:8080\" target=\"_blank\" rel=\"noopener\">http://192.168.1.23:8080</a><br>账号admin密码 shipyard</p>\n<p>3、haproxy web<br><a href=\"http://192.168.1.14:8888/admin?stats\" target=\"_blank\" rel=\"noopener\">http://192.168.1.14:8888/admin?stats</a><br>账号：admin 密码admin<br><code>`</code></p>"},{"title":"docker-redis集群","date":"2018-04-08T03:16:46.000Z","_content":"前言\nRedis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。\n此文只要是针对基于docker部署redis集群，实现主从同步\n<!--more-->\nmaster\t192.168.1.14\nslave\t192.168.1.15\n\n## master操作\n\n# 1.创建数据文件\n```\nmkdir /opt/redis\n```\n# 2.拉取redis镜像\n```\ndocker pull benyoo/redis:3.2.5\n```\n# 3.配置redis文件\n```\necho 'bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile \"\"\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n \nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi' >/opt/redis/redis.conf\n```\n# 4.配置防火墙\n```\niptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment \"REDIS_SERVER\" -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n```\n# 5.启动redis容器\n```\ndocker run -d \\\n--privileged=true \\\n--name redis-master \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/etc/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n```\n## slave上操作\n\n# 1.创建数据文件\n```\nmkdir /opt/redis\n```\n2.拉取redis镜像\n```\ndocker pull benyoo/redis:3.2.5\n```\n3.配置redis文件\n```\necho 'bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile \"\"\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n \nslaveof 192.168.1.14 6379\nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi' >/opt/redis/redis.conf\n```\n# 4.配置防火墙\n```\niptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment \"REDIS_SERVER\" -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n```\n# 5.启动redis容器\n```\ndocker run -d \\\n--privileged=true \\\n--name redis-slave \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/opt/redis/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n```\n# 测试\n```\ndocker exec -it redis redis-cli -h 192.168.1.15 -a ZDU0NTlkNDY5NWZi info replication\n# Replication\nrole:slave\nmaster_host:192.168.1.14\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:9\nmaster_sync_in_progress:0\nslave_repl_offset:281\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n```\n```\ndocker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi info replication \n# Replication\nrole:master\nconnected_slaves:1\nslave0:ip=192.168.1.15,port=6379,state=online,offset=295,lag=1\nmaster_repl_offset:295\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:2\nrepl_backlog_histlen:294\n```\n```\ndocker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi set Test_Write_key www.shangtv.cn \t\t#创建数据\nOK\n```\n```\ndocker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi get Test_Write_key \nwww.shangtv.cn\n```","source":"_posts/docker-redis集群.md","raw":"---\ntitle: docker-redis集群\ndate: 2018-04-08 11:16:46\ncategories: dockers\ntags: [docker, redis, linux自动化运维]\n---\n前言\nRedis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。\n此文只要是针对基于docker部署redis集群，实现主从同步\n<!--more-->\nmaster\t192.168.1.14\nslave\t192.168.1.15\n\n## master操作\n\n# 1.创建数据文件\n```\nmkdir /opt/redis\n```\n# 2.拉取redis镜像\n```\ndocker pull benyoo/redis:3.2.5\n```\n# 3.配置redis文件\n```\necho 'bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile \"\"\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n \nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi' >/opt/redis/redis.conf\n```\n# 4.配置防火墙\n```\niptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment \"REDIS_SERVER\" -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n```\n# 5.启动redis容器\n```\ndocker run -d \\\n--privileged=true \\\n--name redis-master \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/etc/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n```\n## slave上操作\n\n# 1.创建数据文件\n```\nmkdir /opt/redis\n```\n2.拉取redis镜像\n```\ndocker pull benyoo/redis:3.2.5\n```\n3.配置redis文件\n```\necho 'bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile \"\"\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n \nslaveof 192.168.1.14 6379\nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi' >/opt/redis/redis.conf\n```\n# 4.配置防火墙\n```\niptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment \"REDIS_SERVER\" -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n```\n# 5.启动redis容器\n```\ndocker run -d \\\n--privileged=true \\\n--name redis-slave \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/opt/redis/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n```\n# 测试\n```\ndocker exec -it redis redis-cli -h 192.168.1.15 -a ZDU0NTlkNDY5NWZi info replication\n# Replication\nrole:slave\nmaster_host:192.168.1.14\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:9\nmaster_sync_in_progress:0\nslave_repl_offset:281\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n```\n```\ndocker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi info replication \n# Replication\nrole:master\nconnected_slaves:1\nslave0:ip=192.168.1.15,port=6379,state=online,offset=295,lag=1\nmaster_repl_offset:295\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:2\nrepl_backlog_histlen:294\n```\n```\ndocker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi set Test_Write_key www.shangtv.cn \t\t#创建数据\nOK\n```\n```\ndocker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi get Test_Write_key \nwww.shangtv.cn\n```","slug":"docker-redis集群","published":1,"updated":"2018-04-09T05:51:04.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfrvzql0000acojf4d4ywee9","content":"<p>前言<br>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。<br>此文只要是针对基于docker部署redis集群，实现主从同步<br><a id=\"more\"></a><br>master    192.168.1.14<br>slave    192.168.1.15</p>\n<h2 id=\"master操作\"><a href=\"#master操作\" class=\"headerlink\" title=\"master操作\"></a>master操作</h2><h1 id=\"1-创建数据文件\"><a href=\"#1-创建数据文件\" class=\"headerlink\" title=\"1.创建数据文件\"></a>1.创建数据文件</h1><pre><code>mkdir /opt/redis\n</code></pre><h1 id=\"2-拉取redis镜像\"><a href=\"#2-拉取redis镜像\" class=\"headerlink\" title=\"2.拉取redis镜像\"></a>2.拉取redis镜像</h1><pre><code>docker pull benyoo/redis:3.2.5\n</code></pre><h1 id=\"3-配置redis文件\"><a href=\"#3-配置redis文件\" class=\"headerlink\" title=\"3.配置redis文件\"></a>3.配置redis文件</h1><pre><code>echo &#39;bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile &quot;&quot;\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events &quot;&quot;\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n\nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi&#39; &gt;/opt/redis/redis.conf\n</code></pre><h1 id=\"4-配置防火墙\"><a href=\"#4-配置防火墙\" class=\"headerlink\" title=\"4.配置防火墙\"></a>4.配置防火墙</h1><pre><code>iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment &quot;REDIS_SERVER&quot; -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n</code></pre><h1 id=\"5-启动redis容器\"><a href=\"#5-启动redis容器\" class=\"headerlink\" title=\"5.启动redis容器\"></a>5.启动redis容器</h1><pre><code>docker run -d \\\n--privileged=true \\\n--name redis-master \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/etc/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n</code></pre><h2 id=\"slave上操作\"><a href=\"#slave上操作\" class=\"headerlink\" title=\"slave上操作\"></a>slave上操作</h2><h1 id=\"1-创建数据文件-1\"><a href=\"#1-创建数据文件-1\" class=\"headerlink\" title=\"1.创建数据文件\"></a>1.创建数据文件</h1><pre><code>mkdir /opt/redis\n</code></pre><p>2.拉取redis镜像</p>\n<pre><code>docker pull benyoo/redis:3.2.5\n</code></pre><p>3.配置redis文件</p>\n<pre><code>echo &#39;bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile &quot;&quot;\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events &quot;&quot;\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n\nslaveof 192.168.1.14 6379\nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi&#39; &gt;/opt/redis/redis.conf\n</code></pre><h1 id=\"4-配置防火墙-1\"><a href=\"#4-配置防火墙-1\" class=\"headerlink\" title=\"4.配置防火墙\"></a>4.配置防火墙</h1><pre><code>iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment &quot;REDIS_SERVER&quot; -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n</code></pre><h1 id=\"5-启动redis容器-1\"><a href=\"#5-启动redis容器-1\" class=\"headerlink\" title=\"5.启动redis容器\"></a>5.启动redis容器</h1><pre><code>docker run -d \\\n--privileged=true \\\n--name redis-slave \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/opt/redis/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n</code></pre><h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><pre><code>docker exec -it redis redis-cli -h 192.168.1.15 -a ZDU0NTlkNDY5NWZi info replication\n# Replication\nrole:slave\nmaster_host:192.168.1.14\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:9\nmaster_sync_in_progress:0\nslave_repl_offset:281\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n</code></pre><pre><code>docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi info replication \n# Replication\nrole:master\nconnected_slaves:1\nslave0:ip=192.168.1.15,port=6379,state=online,offset=295,lag=1\nmaster_repl_offset:295\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:2\nrepl_backlog_histlen:294\n</code></pre><pre><code>docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi set Test_Write_key www.shangtv.cn         #创建数据\nOK\n</code></pre><pre><code>docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi get Test_Write_key \nwww.shangtv.cn\n</code></pre>","site":{"data":{}},"excerpt":"<p>前言<br>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。<br>此文只要是针对基于docker部署redis集群，实现主从同步<br>","more":"<br>master    192.168.1.14<br>slave    192.168.1.15</p>\n<h2 id=\"master操作\"><a href=\"#master操作\" class=\"headerlink\" title=\"master操作\"></a>master操作</h2><h1 id=\"1-创建数据文件\"><a href=\"#1-创建数据文件\" class=\"headerlink\" title=\"1.创建数据文件\"></a>1.创建数据文件</h1><pre><code>mkdir /opt/redis\n</code></pre><h1 id=\"2-拉取redis镜像\"><a href=\"#2-拉取redis镜像\" class=\"headerlink\" title=\"2.拉取redis镜像\"></a>2.拉取redis镜像</h1><pre><code>docker pull benyoo/redis:3.2.5\n</code></pre><h1 id=\"3-配置redis文件\"><a href=\"#3-配置redis文件\" class=\"headerlink\" title=\"3.配置redis文件\"></a>3.配置redis文件</h1><pre><code>echo &#39;bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile &quot;&quot;\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events &quot;&quot;\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n\nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi&#39; &gt;/opt/redis/redis.conf\n</code></pre><h1 id=\"4-配置防火墙\"><a href=\"#4-配置防火墙\" class=\"headerlink\" title=\"4.配置防火墙\"></a>4.配置防火墙</h1><pre><code>iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment &quot;REDIS_SERVER&quot; -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n</code></pre><h1 id=\"5-启动redis容器\"><a href=\"#5-启动redis容器\" class=\"headerlink\" title=\"5.启动redis容器\"></a>5.启动redis容器</h1><pre><code>docker run -d \\\n--privileged=true \\\n--name redis-master \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/etc/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n</code></pre><h2 id=\"slave上操作\"><a href=\"#slave上操作\" class=\"headerlink\" title=\"slave上操作\"></a>slave上操作</h2><h1 id=\"1-创建数据文件-1\"><a href=\"#1-创建数据文件-1\" class=\"headerlink\" title=\"1.创建数据文件\"></a>1.创建数据文件</h1><pre><code>mkdir /opt/redis\n</code></pre><p>2.拉取redis镜像</p>\n<pre><code>docker pull benyoo/redis:3.2.5\n</code></pre><p>3.配置redis文件</p>\n<pre><code>echo &#39;bind 0.0.0.0\nprotected-mode yes\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 300\ndaemonize no\nsupervised no\npidfile /var/run/redis_6379.pid\nloglevel notice\nlogfile &quot;&quot;\ndatabases 8\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir /data/redis\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\nslave-priority 100\nappendonly no\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events &quot;&quot;\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nlist-compress-depth 0\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n\nslaveof 192.168.1.14 6379\nmasterauth ZDU0NTlkNDY5NWZi\nrequirepass ZDU0NTlkNDY5NWZi&#39; &gt;/opt/redis/redis.conf\n</code></pre><h1 id=\"4-配置防火墙-1\"><a href=\"#4-配置防火墙-1\" class=\"headerlink\" title=\"4.配置防火墙\"></a>4.配置防火墙</h1><pre><code>iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment &quot;REDIS_SERVER&quot; -m multiport --dports 6379 -j ACCEPT\niptables -nvxL --lin\n</code></pre><h1 id=\"5-启动redis容器-1\"><a href=\"#5-启动redis容器-1\" class=\"headerlink\" title=\"5.启动redis容器\"></a>5.启动redis容器</h1><pre><code>docker run -d \\\n--privileged=true \\\n--name redis-slave \\\n--restart=always \\\n-p 6379:6379\n-v /opt/redis/redis.conf:/opt/redis/redis.conf \\\n-v /etc/localtime:/etc/localtime \\\nbenyoo/redis:3.2.5\n</code></pre><h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><pre><code>docker exec -it redis redis-cli -h 192.168.1.15 -a ZDU0NTlkNDY5NWZi info replication\n# Replication\nrole:slave\nmaster_host:192.168.1.14\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:9\nmaster_sync_in_progress:0\nslave_repl_offset:281\nslave_priority:100\nslave_read_only:1\nconnected_slaves:0\nmaster_repl_offset:0\nrepl_backlog_active:0\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:0\nrepl_backlog_histlen:0\n</code></pre><pre><code>docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi info replication \n# Replication\nrole:master\nconnected_slaves:1\nslave0:ip=192.168.1.15,port=6379,state=online,offset=295,lag=1\nmaster_repl_offset:295\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:2\nrepl_backlog_histlen:294\n</code></pre><pre><code>docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi set Test_Write_key www.shangtv.cn         #创建数据\nOK\n</code></pre><pre><code>docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi get Test_Write_key \nwww.shangtv.cn\n</code></pre>"},{"title":"etcd集群","date":"2018-04-08T02:47:45.000Z","copyright":true,"password":null,"_content":"前言\nEtcd:一个键值存储仓库，主要用于配置共享和服务发现。\n优点：\n\t简单：支持 curl 方式的用户 API (HTTP+JSON)\n\t安全：可选 SSL 客户端证书认证\n\t快速：单实例可达每秒 1000 次写操作\n\t可靠：使用 Raft 实现分布式\n\n本文主要阐述集群etcd的部署\n<!--more-->\n安装etcd可以通过源码编译安装，也可以用yum安装，这里实验用yum安装\nConfigure epel yum\n```\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && rpm -ivh epel-release-latest-7.noarch.rpm\n```\ninstall etcd\n```\nyum install -y etcd\n```\nconfigure host\n```\necho \"etcd1 192.168.1.100\" >> /etc/hosts\necho \"etcd2 192.168.1.200\" >> /etc/hosts\n```\n```\nIP=$(ifconfig  eth1 |awk  -F '[: ]+' 'NR==2{print $3}')\nIP1=192.168.1.100\nIP2=192.168.1.200\nHOST=\"etcd1=http://192.168.1.100:2380,etcd2=http://192.168.1.200:2380\"\n```\n```\nfunction node1{\n#Configure the node1 etcd file\nsed -i 's#\\#ETCD_LISTEN_PEER_URLS=\"http://localhost:2380\"#ETCD_LISTEN_PEER_URLS=\"http://${IP1}:2380\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_LISTEN_CLIENT_URLS=\"http://localhost:2379\"#ETCD_LISTEN_CLIENT_URLS=\"http://0.0.0.0:2379\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_ADVERTISE_CLIENT_URLS=\"http://localhost:2379\"#ETCD_ADVERTISE_CLIENT_URLS=\"http://${IP1}:2379\"#g' /etc/etcd/etc.conf\nsed -i 's#\\#ETCD_INITIAL_CLUSTER=\"default=http://localhost:2380\"#ETCD_INITIAL_CLUSTER=\"${HOST}\"#'g\n\n}\n\nfunction node2{\n#Configure the node2 etcd file\nsed -i 's#\\#ETCD_LISTEN_PEER_URLS=\"http://localhost:2380\"#ETCD_LISTEN_PEER_URLS=\"http://${IP2}:2380\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_LISTEN_CLIENT_URLS=\"http://localhost:2379\"#ETCD_LISTEN_CLIENT_URLS=\"http://0.0.0.0:2379\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_ADVERTISE_CLIENT_URLS=\"http://localhost:2379\"#ETCD_ADVERTISE_CLIENT_URLS=\"http://${IP2}:2379\"#g' /etc/etcd/etc.conf\nsed -i 's#\\#ETCD_INITIAL_CLUSTER=\"default=http://localhost:2380\"#ETCD_INITIAL_CLUSTER=\"${HOST}\"#g' /etc/etcd/etc.conf\n}\n\nfunction start{\n\tsystemctl enable etcd\n\tsystemctl restart etcd\n\tsystemctl status etcd\n}\n\nif [ \"$IP\"==\"$IP1\" ];then\n\tnode1\n\tstart\nelse\n\tnode2\n\tstart\nfi\n```\n\nlook etcd node list\n```\netcdctl member list\n```\nlook etcd node status\n```\netcdctl  cluster-health\n```","source":"_posts/etcd集群.md","raw":"---\ntitle: etcd集群\ndate: 2018-04-08 10:47:45\ntags: [docker, linux自动化运维, etcd]\ncopyright: true\npassword:\n---\n前言\nEtcd:一个键值存储仓库，主要用于配置共享和服务发现。\n优点：\n\t简单：支持 curl 方式的用户 API (HTTP+JSON)\n\t安全：可选 SSL 客户端证书认证\n\t快速：单实例可达每秒 1000 次写操作\n\t可靠：使用 Raft 实现分布式\n\n本文主要阐述集群etcd的部署\n<!--more-->\n安装etcd可以通过源码编译安装，也可以用yum安装，这里实验用yum安装\nConfigure epel yum\n```\nwget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && rpm -ivh epel-release-latest-7.noarch.rpm\n```\ninstall etcd\n```\nyum install -y etcd\n```\nconfigure host\n```\necho \"etcd1 192.168.1.100\" >> /etc/hosts\necho \"etcd2 192.168.1.200\" >> /etc/hosts\n```\n```\nIP=$(ifconfig  eth1 |awk  -F '[: ]+' 'NR==2{print $3}')\nIP1=192.168.1.100\nIP2=192.168.1.200\nHOST=\"etcd1=http://192.168.1.100:2380,etcd2=http://192.168.1.200:2380\"\n```\n```\nfunction node1{\n#Configure the node1 etcd file\nsed -i 's#\\#ETCD_LISTEN_PEER_URLS=\"http://localhost:2380\"#ETCD_LISTEN_PEER_URLS=\"http://${IP1}:2380\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_LISTEN_CLIENT_URLS=\"http://localhost:2379\"#ETCD_LISTEN_CLIENT_URLS=\"http://0.0.0.0:2379\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_ADVERTISE_CLIENT_URLS=\"http://localhost:2379\"#ETCD_ADVERTISE_CLIENT_URLS=\"http://${IP1}:2379\"#g' /etc/etcd/etc.conf\nsed -i 's#\\#ETCD_INITIAL_CLUSTER=\"default=http://localhost:2380\"#ETCD_INITIAL_CLUSTER=\"${HOST}\"#'g\n\n}\n\nfunction node2{\n#Configure the node2 etcd file\nsed -i 's#\\#ETCD_LISTEN_PEER_URLS=\"http://localhost:2380\"#ETCD_LISTEN_PEER_URLS=\"http://${IP2}:2380\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_LISTEN_CLIENT_URLS=\"http://localhost:2379\"#ETCD_LISTEN_CLIENT_URLS=\"http://0.0.0.0:2379\"#g' /etc/etcd/etcd.conf\nsed -i 's#ETCD_ADVERTISE_CLIENT_URLS=\"http://localhost:2379\"#ETCD_ADVERTISE_CLIENT_URLS=\"http://${IP2}:2379\"#g' /etc/etcd/etc.conf\nsed -i 's#\\#ETCD_INITIAL_CLUSTER=\"default=http://localhost:2380\"#ETCD_INITIAL_CLUSTER=\"${HOST}\"#g' /etc/etcd/etc.conf\n}\n\nfunction start{\n\tsystemctl enable etcd\n\tsystemctl restart etcd\n\tsystemctl status etcd\n}\n\nif [ \"$IP\"==\"$IP1\" ];then\n\tnode1\n\tstart\nelse\n\tnode2\n\tstart\nfi\n```\n\nlook etcd node list\n```\netcdctl member list\n```\nlook etcd node status\n```\netcdctl  cluster-health\n```","slug":"etcd集群","published":1,"updated":"2018-04-09T07:59:53.899Z","_id":"cjfrvzql6000dcojfbah91vly","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前言<br>Etcd:一个键值存储仓库，主要用于配置共享和服务发现。<br>优点：<br>    简单：支持 curl 方式的用户 API (HTTP+JSON)<br>    安全：可选 SSL 客户端证书认证<br>    快速：单实例可达每秒 1000 次写操作<br>    可靠：使用 Raft 实现分布式</p>\n<p>本文主要阐述集群etcd的部署<br><a id=\"more\"></a><br>安装etcd可以通过源码编译安装，也可以用yum安装，这里实验用yum安装<br>Configure epel yum</p>\n<pre><code>wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &amp;&amp; rpm -ivh epel-release-latest-7.noarch.rpm\n</code></pre><p>install etcd</p>\n<pre><code>yum install -y etcd\n</code></pre><p>configure host</p>\n<pre><code>echo &quot;etcd1 192.168.1.100&quot; &gt;&gt; /etc/hosts\necho &quot;etcd2 192.168.1.200&quot; &gt;&gt; /etc/hosts\n</code></pre><pre><code>IP=$(ifconfig  eth1 |awk  -F &#39;[: ]+&#39; &#39;NR==2{print $3}&#39;)\nIP1=192.168.1.100\nIP2=192.168.1.200\nHOST=&quot;etcd1=http://192.168.1.100:2380,etcd2=http://192.168.1.200:2380&quot;\n</code></pre><pre><code>function node1{\n#Configure the node1 etcd file\nsed -i &#39;s#\\#ETCD_LISTEN_PEER_URLS=&quot;http://localhost:2380&quot;#ETCD_LISTEN_PEER_URLS=&quot;http://${IP1}:2380&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_LISTEN_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_LISTEN_CLIENT_URLS=&quot;http://0.0.0.0:2379&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://${IP1}:2379&quot;#g&#39; /etc/etcd/etc.conf\nsed -i &#39;s#\\#ETCD_INITIAL_CLUSTER=&quot;default=http://localhost:2380&quot;#ETCD_INITIAL_CLUSTER=&quot;${HOST}&quot;#&#39;g\n\n}\n\nfunction node2{\n#Configure the node2 etcd file\nsed -i &#39;s#\\#ETCD_LISTEN_PEER_URLS=&quot;http://localhost:2380&quot;#ETCD_LISTEN_PEER_URLS=&quot;http://${IP2}:2380&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_LISTEN_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_LISTEN_CLIENT_URLS=&quot;http://0.0.0.0:2379&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://${IP2}:2379&quot;#g&#39; /etc/etcd/etc.conf\nsed -i &#39;s#\\#ETCD_INITIAL_CLUSTER=&quot;default=http://localhost:2380&quot;#ETCD_INITIAL_CLUSTER=&quot;${HOST}&quot;#g&#39; /etc/etcd/etc.conf\n}\n\nfunction start{\n    systemctl enable etcd\n    systemctl restart etcd\n    systemctl status etcd\n}\n\nif [ &quot;$IP&quot;==&quot;$IP1&quot; ];then\n    node1\n    start\nelse\n    node2\n    start\nfi\n</code></pre><p>look etcd node list</p>\n<pre><code>etcdctl member list\n</code></pre><p>look etcd node status</p>\n<pre><code>etcdctl  cluster-health\n</code></pre>","site":{"data":{}},"excerpt":"<p>前言<br>Etcd:一个键值存储仓库，主要用于配置共享和服务发现。<br>优点：<br>    简单：支持 curl 方式的用户 API (HTTP+JSON)<br>    安全：可选 SSL 客户端证书认证<br>    快速：单实例可达每秒 1000 次写操作<br>    可靠：使用 Raft 实现分布式</p>\n<p>本文主要阐述集群etcd的部署<br>","more":"<br>安装etcd可以通过源码编译安装，也可以用yum安装，这里实验用yum安装<br>Configure epel yum</p>\n<pre><code>wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &amp;&amp; rpm -ivh epel-release-latest-7.noarch.rpm\n</code></pre><p>install etcd</p>\n<pre><code>yum install -y etcd\n</code></pre><p>configure host</p>\n<pre><code>echo &quot;etcd1 192.168.1.100&quot; &gt;&gt; /etc/hosts\necho &quot;etcd2 192.168.1.200&quot; &gt;&gt; /etc/hosts\n</code></pre><pre><code>IP=$(ifconfig  eth1 |awk  -F &#39;[: ]+&#39; &#39;NR==2{print $3}&#39;)\nIP1=192.168.1.100\nIP2=192.168.1.200\nHOST=&quot;etcd1=http://192.168.1.100:2380,etcd2=http://192.168.1.200:2380&quot;\n</code></pre><pre><code>function node1{\n#Configure the node1 etcd file\nsed -i &#39;s#\\#ETCD_LISTEN_PEER_URLS=&quot;http://localhost:2380&quot;#ETCD_LISTEN_PEER_URLS=&quot;http://${IP1}:2380&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_LISTEN_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_LISTEN_CLIENT_URLS=&quot;http://0.0.0.0:2379&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://${IP1}:2379&quot;#g&#39; /etc/etcd/etc.conf\nsed -i &#39;s#\\#ETCD_INITIAL_CLUSTER=&quot;default=http://localhost:2380&quot;#ETCD_INITIAL_CLUSTER=&quot;${HOST}&quot;#&#39;g\n\n}\n\nfunction node2{\n#Configure the node2 etcd file\nsed -i &#39;s#\\#ETCD_LISTEN_PEER_URLS=&quot;http://localhost:2380&quot;#ETCD_LISTEN_PEER_URLS=&quot;http://${IP2}:2380&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_LISTEN_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_LISTEN_CLIENT_URLS=&quot;http://0.0.0.0:2379&quot;#g&#39; /etc/etcd/etcd.conf\nsed -i &#39;s#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://localhost:2379&quot;#ETCD_ADVERTISE_CLIENT_URLS=&quot;http://${IP2}:2379&quot;#g&#39; /etc/etcd/etc.conf\nsed -i &#39;s#\\#ETCD_INITIAL_CLUSTER=&quot;default=http://localhost:2380&quot;#ETCD_INITIAL_CLUSTER=&quot;${HOST}&quot;#g&#39; /etc/etcd/etc.conf\n}\n\nfunction start{\n    systemctl enable etcd\n    systemctl restart etcd\n    systemctl status etcd\n}\n\nif [ &quot;$IP&quot;==&quot;$IP1&quot; ];then\n    node1\n    start\nelse\n    node2\n    start\nfi\n</code></pre><p>look etcd node list</p>\n<pre><code>etcdctl member list\n</code></pre><p>look etcd node status</p>\n<pre><code>etcdctl  cluster-health\n</code></pre>"},{"title":"registry v2搭建","date":"2018-04-08T03:16:20.000Z","_content":"\n前言\n新版 registry v2对镜像存储格式进行了重新设计，并且和旧版还不兼容。registry v2是由go语言开发，docker从1.6版本开始支持registry v2，之前python开发的老版registry在网上已被标为废弃了（没有维护更新，但也可以用）。\n\n之前在测试环境搭建了一个老版的registry，用了也比较久了。为了跟上技术的脚步，也准备今后使用新版registry v2。由于对旧版是不兼容的，所以之前仓库的数据目录还不能直接拿来挂载，只好重新做个新的，镜像只好等以后慢慢再放上去了。下面对我这次配置的步骤简单的介绍一下。\n<!--more-->\n# 服务器环境\n本次使用centos7.3的操作系统，服务器IP假设为：192.168.0.100\n预先装好docker服务，操作如下：\n\n# 添加docker.repo安装源，写入文件\n```\ntee /etc/yum.repos.d/docker.repo<<EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n```\n# 安装docker\n```\nyum install docker-engine -y\nsystemctl enable docker\nsystemctl start docker\n```\n# 1. 获取最新的registry的容器,了解到目前最新版为2.4.1，于是直接使用docker pull命令从公用仓库去拉即可\n```\ndocker pull registry:2.4.1\n```\n# 2. 运行registry:2.4.1容器\n这里需要注意的是新registry仓库数据目录的位置。之前老版的位置是/tmp/registry，hub.docker.com上的演示命令里写的是/tmp/registry-dev，其实这个不对。试验证明，新registry的仓库目录是在/var/lib/registry，所以运行时挂载目录需要注意。\n```\ndocker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n```\n-v选项指定将/opt/registry-var/目录挂载给/var/lib/registry/\n当使用curl http://192.168.0.100:5000/v2/_catalog能看到json格式的返回值时，说明registry已经运行起来了。\n\n# 3. 修改配置文件以指定registry地址\n上面registry虽然已经运行起来了，但是如果想用push命令上传镜像是会报错的，需要在配置文件中指定registry的地址。在/lib/systemd/system/docker.service文件中添加一下配置：\n--insecure-registry 192.168.0.100:5000'\n\n为了配置简单，省去安全相关的配置，这里使用--insecure-registry选项修改配置文件后，一定要重启docker服务才能生效，\n```\nsystemctl restart docker\n```\n这时再push就可以上传镜像到所搭建的registry仓库了。需要注意的是，上传前要先给镜像tag一个192.168.0.100:5000/为前缀的名字，这样才能在push的时候存到私库。\n```\ndocker tag docker.io/registry:2.4.1 192.168.0.100:5000/registry:2.4.1\ndocker push 192.168.0.100:5000/registry:2.4.1\n```\n# 4. 配置带用户权限的registry\n到上面为止，registry已经可以使用了。如果想要控制registry的使用权限，使其只有在登录用户名和密码之后才能使用的话，还需要做额外的设置。\n\nregistry的用户名密码文件可以通过htpasswd来生成：\n```\nmkdir /opt/registry-var/auth/\ndocker run --entrypoint htpasswd registry:2.4.1 -Bbn felix felix  >> /opt/registry-var/auth/htpasswd\n```\n上面这条命令是为felix用户名生成密码为felix的一条用户信息，存在/opt/registry-var/auth/htpasswd文件里面，文件中存的密码是被加密过的。\n使用带用户权限的registry时候，容器的启动命令就跟上面不一样了，将之前的容器停掉并删除，然后执行下面的命令：\n```\ndocker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/auth/:/auth/ \\\n-e \"REGISTRY_AUTH=htpasswd\" \\\n-e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\\n-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n```\n这时，如果直接想查看仓库信息、pull或push都会出现权限报错。必须先使用docker login 命令来登录私有仓库：\n```\ndocker login 192.168.0.100:5000\n```\n根据提示，输入用户名和密码即可。如果登录成功，会在/root/.docker/config.json文件中保存账户信息，这样就可以继续使用了。\n","source":"_posts/registry-v2搭建.md","raw":"---\ntitle: registry v2搭建\ndate: 2018-04-08 11:16:20\ntags: [docker, docker-registry, linux自动化运维]\n---\n\n前言\n新版 registry v2对镜像存储格式进行了重新设计，并且和旧版还不兼容。registry v2是由go语言开发，docker从1.6版本开始支持registry v2，之前python开发的老版registry在网上已被标为废弃了（没有维护更新，但也可以用）。\n\n之前在测试环境搭建了一个老版的registry，用了也比较久了。为了跟上技术的脚步，也准备今后使用新版registry v2。由于对旧版是不兼容的，所以之前仓库的数据目录还不能直接拿来挂载，只好重新做个新的，镜像只好等以后慢慢再放上去了。下面对我这次配置的步骤简单的介绍一下。\n<!--more-->\n# 服务器环境\n本次使用centos7.3的操作系统，服务器IP假设为：192.168.0.100\n预先装好docker服务，操作如下：\n\n# 添加docker.repo安装源，写入文件\n```\ntee /etc/yum.repos.d/docker.repo<<EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n```\n# 安装docker\n```\nyum install docker-engine -y\nsystemctl enable docker\nsystemctl start docker\n```\n# 1. 获取最新的registry的容器,了解到目前最新版为2.4.1，于是直接使用docker pull命令从公用仓库去拉即可\n```\ndocker pull registry:2.4.1\n```\n# 2. 运行registry:2.4.1容器\n这里需要注意的是新registry仓库数据目录的位置。之前老版的位置是/tmp/registry，hub.docker.com上的演示命令里写的是/tmp/registry-dev，其实这个不对。试验证明，新registry的仓库目录是在/var/lib/registry，所以运行时挂载目录需要注意。\n```\ndocker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n```\n-v选项指定将/opt/registry-var/目录挂载给/var/lib/registry/\n当使用curl http://192.168.0.100:5000/v2/_catalog能看到json格式的返回值时，说明registry已经运行起来了。\n\n# 3. 修改配置文件以指定registry地址\n上面registry虽然已经运行起来了，但是如果想用push命令上传镜像是会报错的，需要在配置文件中指定registry的地址。在/lib/systemd/system/docker.service文件中添加一下配置：\n--insecure-registry 192.168.0.100:5000'\n\n为了配置简单，省去安全相关的配置，这里使用--insecure-registry选项修改配置文件后，一定要重启docker服务才能生效，\n```\nsystemctl restart docker\n```\n这时再push就可以上传镜像到所搭建的registry仓库了。需要注意的是，上传前要先给镜像tag一个192.168.0.100:5000/为前缀的名字，这样才能在push的时候存到私库。\n```\ndocker tag docker.io/registry:2.4.1 192.168.0.100:5000/registry:2.4.1\ndocker push 192.168.0.100:5000/registry:2.4.1\n```\n# 4. 配置带用户权限的registry\n到上面为止，registry已经可以使用了。如果想要控制registry的使用权限，使其只有在登录用户名和密码之后才能使用的话，还需要做额外的设置。\n\nregistry的用户名密码文件可以通过htpasswd来生成：\n```\nmkdir /opt/registry-var/auth/\ndocker run --entrypoint htpasswd registry:2.4.1 -Bbn felix felix  >> /opt/registry-var/auth/htpasswd\n```\n上面这条命令是为felix用户名生成密码为felix的一条用户信息，存在/opt/registry-var/auth/htpasswd文件里面，文件中存的密码是被加密过的。\n使用带用户权限的registry时候，容器的启动命令就跟上面不一样了，将之前的容器停掉并删除，然后执行下面的命令：\n```\ndocker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/auth/:/auth/ \\\n-e \"REGISTRY_AUTH=htpasswd\" \\\n-e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\\n-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n```\n这时，如果直接想查看仓库信息、pull或push都会出现权限报错。必须先使用docker login 命令来登录私有仓库：\n```\ndocker login 192.168.0.100:5000\n```\n根据提示，输入用户名和密码即可。如果登录成功，会在/root/.docker/config.json文件中保存账户信息，这样就可以继续使用了。\n","slug":"registry-v2搭建","published":1,"updated":"2018-04-09T05:51:47.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfrvzqlb000fcojfso8jco4k","content":"<p>前言<br>新版 registry v2对镜像存储格式进行了重新设计，并且和旧版还不兼容。registry v2是由go语言开发，docker从1.6版本开始支持registry v2，之前python开发的老版registry在网上已被标为废弃了（没有维护更新，但也可以用）。</p>\n<p>之前在测试环境搭建了一个老版的registry，用了也比较久了。为了跟上技术的脚步，也准备今后使用新版registry v2。由于对旧版是不兼容的，所以之前仓库的数据目录还不能直接拿来挂载，只好重新做个新的，镜像只好等以后慢慢再放上去了。下面对我这次配置的步骤简单的介绍一下。<br><a id=\"more\"></a></p>\n<h1 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h1><p>本次使用centos7.3的操作系统，服务器IP假设为：192.168.0.100<br>预先装好docker服务，操作如下：</p>\n<h1 id=\"添加docker-repo安装源，写入文件\"><a href=\"#添加docker-repo安装源，写入文件\" class=\"headerlink\" title=\"添加docker.repo安装源，写入文件\"></a>添加docker.repo安装源，写入文件</h1><pre><code>tee /etc/yum.repos.d/docker.repo&lt;&lt;EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n</code></pre><h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><pre><code>yum install docker-engine -y\nsystemctl enable docker\nsystemctl start docker\n</code></pre><h1 id=\"1-获取最新的registry的容器-了解到目前最新版为2-4-1，于是直接使用docker-pull命令从公用仓库去拉即可\"><a href=\"#1-获取最新的registry的容器-了解到目前最新版为2-4-1，于是直接使用docker-pull命令从公用仓库去拉即可\" class=\"headerlink\" title=\"1. 获取最新的registry的容器,了解到目前最新版为2.4.1，于是直接使用docker pull命令从公用仓库去拉即可\"></a>1. 获取最新的registry的容器,了解到目前最新版为2.4.1，于是直接使用docker pull命令从公用仓库去拉即可</h1><pre><code>docker pull registry:2.4.1\n</code></pre><h1 id=\"2-运行registry-2-4-1容器\"><a href=\"#2-运行registry-2-4-1容器\" class=\"headerlink\" title=\"2. 运行registry:2.4.1容器\"></a>2. 运行registry:2.4.1容器</h1><p>这里需要注意的是新registry仓库数据目录的位置。之前老版的位置是/tmp/registry，hub.docker.com上的演示命令里写的是/tmp/registry-dev，其实这个不对。试验证明，新registry的仓库目录是在/var/lib/registry，所以运行时挂载目录需要注意。</p>\n<pre><code>docker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n</code></pre><p>-v选项指定将/opt/registry-var/目录挂载给/var/lib/registry/<br>当使用curl <a href=\"http://192.168.0.100:5000/v2/_catalog能看到json格式的返回值时，说明registry已经运行起来了。\" target=\"_blank\" rel=\"noopener\">http://192.168.0.100:5000/v2/_catalog能看到json格式的返回值时，说明registry已经运行起来了。</a></p>\n<h1 id=\"3-修改配置文件以指定registry地址\"><a href=\"#3-修改配置文件以指定registry地址\" class=\"headerlink\" title=\"3. 修改配置文件以指定registry地址\"></a>3. 修改配置文件以指定registry地址</h1><p>上面registry虽然已经运行起来了，但是如果想用push命令上传镜像是会报错的，需要在配置文件中指定registry的地址。在/lib/systemd/system/docker.service文件中添加一下配置：<br>–insecure-registry 192.168.0.100:5000’</p>\n<p>为了配置简单，省去安全相关的配置，这里使用–insecure-registry选项修改配置文件后，一定要重启docker服务才能生效，</p>\n<pre><code>systemctl restart docker\n</code></pre><p>这时再push就可以上传镜像到所搭建的registry仓库了。需要注意的是，上传前要先给镜像tag一个192.168.0.100:5000/为前缀的名字，这样才能在push的时候存到私库。</p>\n<pre><code>docker tag docker.io/registry:2.4.1 192.168.0.100:5000/registry:2.4.1\ndocker push 192.168.0.100:5000/registry:2.4.1\n</code></pre><h1 id=\"4-配置带用户权限的registry\"><a href=\"#4-配置带用户权限的registry\" class=\"headerlink\" title=\"4. 配置带用户权限的registry\"></a>4. 配置带用户权限的registry</h1><p>到上面为止，registry已经可以使用了。如果想要控制registry的使用权限，使其只有在登录用户名和密码之后才能使用的话，还需要做额外的设置。</p>\n<p>registry的用户名密码文件可以通过htpasswd来生成：</p>\n<pre><code>mkdir /opt/registry-var/auth/\ndocker run --entrypoint htpasswd registry:2.4.1 -Bbn felix felix  &gt;&gt; /opt/registry-var/auth/htpasswd\n</code></pre><p>上面这条命令是为felix用户名生成密码为felix的一条用户信息，存在/opt/registry-var/auth/htpasswd文件里面，文件中存的密码是被加密过的。<br>使用带用户权限的registry时候，容器的启动命令就跟上面不一样了，将之前的容器停掉并删除，然后执行下面的命令：</p>\n<pre><code>docker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/auth/:/auth/ \\\n-e &quot;REGISTRY_AUTH=htpasswd&quot; \\\n-e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \\\n-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n</code></pre><p>这时，如果直接想查看仓库信息、pull或push都会出现权限报错。必须先使用docker login 命令来登录私有仓库：</p>\n<pre><code>docker login 192.168.0.100:5000\n</code></pre><p>根据提示，输入用户名和密码即可。如果登录成功，会在/root/.docker/config.json文件中保存账户信息，这样就可以继续使用了。</p>\n","site":{"data":{}},"excerpt":"<p>前言<br>新版 registry v2对镜像存储格式进行了重新设计，并且和旧版还不兼容。registry v2是由go语言开发，docker从1.6版本开始支持registry v2，之前python开发的老版registry在网上已被标为废弃了（没有维护更新，但也可以用）。</p>\n<p>之前在测试环境搭建了一个老版的registry，用了也比较久了。为了跟上技术的脚步，也准备今后使用新版registry v2。由于对旧版是不兼容的，所以之前仓库的数据目录还不能直接拿来挂载，只好重新做个新的，镜像只好等以后慢慢再放上去了。下面对我这次配置的步骤简单的介绍一下。<br>","more":"</p>\n<h1 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h1><p>本次使用centos7.3的操作系统，服务器IP假设为：192.168.0.100<br>预先装好docker服务，操作如下：</p>\n<h1 id=\"添加docker-repo安装源，写入文件\"><a href=\"#添加docker-repo安装源，写入文件\" class=\"headerlink\" title=\"添加docker.repo安装源，写入文件\"></a>添加docker.repo安装源，写入文件</h1><pre><code>tee /etc/yum.repos.d/docker.repo&lt;&lt;EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n</code></pre><h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><pre><code>yum install docker-engine -y\nsystemctl enable docker\nsystemctl start docker\n</code></pre><h1 id=\"1-获取最新的registry的容器-了解到目前最新版为2-4-1，于是直接使用docker-pull命令从公用仓库去拉即可\"><a href=\"#1-获取最新的registry的容器-了解到目前最新版为2-4-1，于是直接使用docker-pull命令从公用仓库去拉即可\" class=\"headerlink\" title=\"1. 获取最新的registry的容器,了解到目前最新版为2.4.1，于是直接使用docker pull命令从公用仓库去拉即可\"></a>1. 获取最新的registry的容器,了解到目前最新版为2.4.1，于是直接使用docker pull命令从公用仓库去拉即可</h1><pre><code>docker pull registry:2.4.1\n</code></pre><h1 id=\"2-运行registry-2-4-1容器\"><a href=\"#2-运行registry-2-4-1容器\" class=\"headerlink\" title=\"2. 运行registry:2.4.1容器\"></a>2. 运行registry:2.4.1容器</h1><p>这里需要注意的是新registry仓库数据目录的位置。之前老版的位置是/tmp/registry，hub.docker.com上的演示命令里写的是/tmp/registry-dev，其实这个不对。试验证明，新registry的仓库目录是在/var/lib/registry，所以运行时挂载目录需要注意。</p>\n<pre><code>docker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n</code></pre><p>-v选项指定将/opt/registry-var/目录挂载给/var/lib/registry/<br>当使用curl <a href=\"http://192.168.0.100:5000/v2/_catalog能看到json格式的返回值时，说明registry已经运行起来了。\" target=\"_blank\" rel=\"noopener\">http://192.168.0.100:5000/v2/_catalog能看到json格式的返回值时，说明registry已经运行起来了。</a></p>\n<h1 id=\"3-修改配置文件以指定registry地址\"><a href=\"#3-修改配置文件以指定registry地址\" class=\"headerlink\" title=\"3. 修改配置文件以指定registry地址\"></a>3. 修改配置文件以指定registry地址</h1><p>上面registry虽然已经运行起来了，但是如果想用push命令上传镜像是会报错的，需要在配置文件中指定registry的地址。在/lib/systemd/system/docker.service文件中添加一下配置：<br>–insecure-registry 192.168.0.100:5000’</p>\n<p>为了配置简单，省去安全相关的配置，这里使用–insecure-registry选项修改配置文件后，一定要重启docker服务才能生效，</p>\n<pre><code>systemctl restart docker\n</code></pre><p>这时再push就可以上传镜像到所搭建的registry仓库了。需要注意的是，上传前要先给镜像tag一个192.168.0.100:5000/为前缀的名字，这样才能在push的时候存到私库。</p>\n<pre><code>docker tag docker.io/registry:2.4.1 192.168.0.100:5000/registry:2.4.1\ndocker push 192.168.0.100:5000/registry:2.4.1\n</code></pre><h1 id=\"4-配置带用户权限的registry\"><a href=\"#4-配置带用户权限的registry\" class=\"headerlink\" title=\"4. 配置带用户权限的registry\"></a>4. 配置带用户权限的registry</h1><p>到上面为止，registry已经可以使用了。如果想要控制registry的使用权限，使其只有在登录用户名和密码之后才能使用的话，还需要做额外的设置。</p>\n<p>registry的用户名密码文件可以通过htpasswd来生成：</p>\n<pre><code>mkdir /opt/registry-var/auth/\ndocker run --entrypoint htpasswd registry:2.4.1 -Bbn felix felix  &gt;&gt; /opt/registry-var/auth/htpasswd\n</code></pre><p>上面这条命令是为felix用户名生成密码为felix的一条用户信息，存在/opt/registry-var/auth/htpasswd文件里面，文件中存的密码是被加密过的。<br>使用带用户权限的registry时候，容器的启动命令就跟上面不一样了，将之前的容器停掉并删除，然后执行下面的命令：</p>\n<pre><code>docker run -d -p 5000:5000 --restart=always \\\n-v /opt/registry-var/auth/:/auth/ \\\n-e &quot;REGISTRY_AUTH=htpasswd&quot; \\\n-e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \\\n-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n-v /opt/registry-var/:/var/lib/registry/ \\\nregistry:2.4.1\n</code></pre><p>这时，如果直接想查看仓库信息、pull或push都会出现权限报错。必须先使用docker login 命令来登录私有仓库：</p>\n<pre><code>docker login 192.168.0.100:5000\n</code></pre><p>根据提示，输入用户名和密码即可。如果登录成功，会在/root/.docker/config.json文件中保存账户信息，这样就可以继续使用了。</p>"},{"title":"你好，Oliver","date":"2018-04-04T03:57:04.000Z","top":true,"comments":0,"_content":"","source":"_posts/你好，Oliver.md","raw":"---\ntitle: 你好，Oliver\ndate: 2018-04-04 11:57:04\ntags:\ntop: true\ncomments: false\n---\n","slug":"你好，Oliver","published":1,"updated":"2018-04-09T10:04:22.802Z","_id":"cjfrvzqle000hcojfjcmq69u1","layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cjfrvzql0000acojf4d4ywee9","category_id":"cjfrvzqkv0007cojftkllu9ky","_id":"cjfrvzqlf000icojf4gdqvpgf"},{"post_id":"cjfrvzqkh0002cojfvt0pm95k","category_id":"cjfrvzqkv0007cojftkllu9ky","_id":"cjfrvzqlh000kcojfctmrp337"},{"post_id":"cjfrvzqkr0005cojfxk6yt1eb","category_id":"cjfrvzqkv0007cojftkllu9ky","_id":"cjfrvzqlj000mcojfvddf61qc"},{"post_id":"cjfrvzqkw0008cojfzx048ert","category_id":"cjfrvzqkv0007cojftkllu9ky","_id":"cjfrvzqll000qcojf5i5vaggt"}],"PostTag":[{"post_id":"cjfrvzqk60000cojft4aw4esj","tag_id":"cjfrvzqko0004cojfsfzpcblc","_id":"cjfrvzqlk000ncojf4ke0n68s"},{"post_id":"cjfrvzqk60000cojft4aw4esj","tag_id":"cjfrvzql3000bcojf7kg1u90p","_id":"cjfrvzqlk000ocojfro61fsax"},{"post_id":"cjfrvzqk60000cojft4aw4esj","tag_id":"cjfrvzqld000gcojfe9ewzrpn","_id":"cjfrvzqlm000rcojf2yhpyiyr"},{"post_id":"cjfrvzqkh0002cojfvt0pm95k","tag_id":"cjfrvzqli000lcojfds5mqowb","_id":"cjfrvzqlq000ucojf37tdkpm1"},{"post_id":"cjfrvzqkh0002cojfvt0pm95k","tag_id":"cjfrvzqll000pcojf050bruy8","_id":"cjfrvzqlr000vcojfapbl8bms"},{"post_id":"cjfrvzqkh0002cojfvt0pm95k","tag_id":"cjfrvzqld000gcojfe9ewzrpn","_id":"cjfrvzqls000xcojflo93wwh3"},{"post_id":"cjfrvzqkr0005cojfxk6yt1eb","tag_id":"cjfrvzqli000lcojfds5mqowb","_id":"cjfrvzqlw0011cojfxu71521g"},{"post_id":"cjfrvzqkr0005cojfxk6yt1eb","tag_id":"cjfrvzqlr000wcojfpjfdj66d","_id":"cjfrvzqlw0012cojfwswvyv70"},{"post_id":"cjfrvzqkr0005cojfxk6yt1eb","tag_id":"cjfrvzqlt000ycojfs72g9fz2","_id":"cjfrvzqlx0014cojf98ixuxk7"},{"post_id":"cjfrvzqkr0005cojfxk6yt1eb","tag_id":"cjfrvzqld000gcojfe9ewzrpn","_id":"cjfrvzqly0015cojf2ysnsrba"},{"post_id":"cjfrvzqkw0008cojfzx048ert","tag_id":"cjfrvzqlv0010cojfxto63xxq","_id":"cjfrvzqm10018cojfeypoeaym"},{"post_id":"cjfrvzqkw0008cojfzx048ert","tag_id":"cjfrvzqli000lcojfds5mqowb","_id":"cjfrvzqm10019cojf1fv8xmuw"},{"post_id":"cjfrvzqkw0008cojfzx048ert","tag_id":"cjfrvzqld000gcojfe9ewzrpn","_id":"cjfrvzqm2001bcojfp517ykhn"},{"post_id":"cjfrvzql0000acojf4d4ywee9","tag_id":"cjfrvzqli000lcojfds5mqowb","_id":"cjfrvzqm5001ecojfmo6wb75i"},{"post_id":"cjfrvzql0000acojf4d4ywee9","tag_id":"cjfrvzqm2001acojffkbzprrv","_id":"cjfrvzqm6001fcojf865a9qze"},{"post_id":"cjfrvzql0000acojf4d4ywee9","tag_id":"cjfrvzqld000gcojfe9ewzrpn","_id":"cjfrvzqm7001hcojf2cq4spyo"},{"post_id":"cjfrvzql6000dcojfbah91vly","tag_id":"cjfrvzqli000lcojfds5mqowb","_id":"cjfrvzqma001kcojfvivuj4vw"},{"post_id":"cjfrvzql6000dcojfbah91vly","tag_id":"cjfrvzqld000gcojfe9ewzrpn","_id":"cjfrvzqmb001lcojf99cxdmfs"},{"post_id":"cjfrvzql6000dcojfbah91vly","tag_id":"cjfrvzqm8001icojf0lvj23oq","_id":"cjfrvzqmc001ncojfkit2wae5"},{"post_id":"cjfrvzqlb000fcojfso8jco4k","tag_id":"cjfrvzqli000lcojfds5mqowb","_id":"cjfrvzqmd001pcojfbuyad62q"},{"post_id":"cjfrvzqlb000fcojfso8jco4k","tag_id":"cjfrvzqmb001mcojfwsd1mmmu","_id":"cjfrvzqmd001qcojfiaejq9sb"},{"post_id":"cjfrvzqlb000fcojfso8jco4k","tag_id":"cjfrvzqld000gcojfe9ewzrpn","_id":"cjfrvzqme001rcojfbdlgxwgt"}],"Tag":[{"name":"linux","_id":"cjfrvzqko0004cojfsfzpcblc"},{"name":"shell","_id":"cjfrvzql3000bcojf7kg1u90p"},{"name":"linux自动化运维","_id":"cjfrvzqld000gcojfe9ewzrpn"},{"name":"docker","_id":"cjfrvzqli000lcojfds5mqowb"},{"name":"mariadb","_id":"cjfrvzqll000pcojf050bruy8"},{"name":"nginx","_id":"cjfrvzqlr000wcojfpjfdj66d"},{"name":"php","_id":"cjfrvzqlt000ycojfs72g9fz2"},{"name":"swarm","_id":"cjfrvzqlv0010cojfxto63xxq"},{"name":"redis","_id":"cjfrvzqm2001acojffkbzprrv"},{"name":"etcd","_id":"cjfrvzqm8001icojf0lvj23oq"},{"name":"docker-registry","_id":"cjfrvzqmb001mcojfwsd1mmmu"}]}}